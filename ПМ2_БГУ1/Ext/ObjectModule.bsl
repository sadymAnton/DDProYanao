//#Область ПодключаемыйМодуль_НачалоПримера

Перем ТиповойМодульДиадока;
Перем ОсновнойМодуль Экспорт;


//**************************************
//{ СЕРВИСНЫЕ ФУНКЦИИ

// Обеспечивает контроль совместимости подключаемого модуля и основного	
Функция ЭДО_ВерсияAPIПодключаемогоМодуля() Экспорт
	Возврат 1;
КонецФункции

Функция НовыйКонтент(ИмяКонтента)
	//для отладки/разработки
	Возврат ОсновнойМодуль.ДД_Компонента_ПолучитьПустойКонтент(ИмяКонтента,Истина);
КонецФункции

// прослойка для отладки: перехватывает исключение при установке значения неподходящего типа в реквизит.
Процедура УстановитьЗначениеXDTO(Элемент,ИмяРеквизита,ЗначениеРеквизита,ЭтоСсылка = Ложь)

	Если ЗначениеРеквизита=Неопределено
		Или ЗначениеРеквизита=NULL Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		//здесь можно добавить проверки на заполненность, вывод сообщений и т.д.
		
		Если ЭтоСсылка Тогда
			Элемент[ИмяРеквизита] = ЗначениеВСтрокуВнутр(ЗначениеРеквизита);
		Иначе	
			Элемент[ИмяРеквизита] = ЗначениеРеквизита;
		КонецЕсли;
		
		//Элемент.Установить(ИмяРеквизита,ЗначениеРеквизита);
		
	Исключение
		Сообщить("Исключение при заполнении реквизита """+ИмяРеквизита+""":
		|"+ОписаниеОшибки());
	КонецПопытки;

КонецПроцедуры

// Может пригодиться при отладке в режиме управляемых форм, когда точки остановки в открытом модуле не срабатывают.
// Достаточно вставить вызов данной процедуры в нужном месте и включить остановку по ошибке.
Процедура ПриглашениеОтладки()
	
	Попытка
		ВызватьИсключение "catch me if you can";
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Процедура ДобавитьСтрокуВТаблицуЗначений(ТЗ, Значение0=Неопределено, Значение1=Неопределено, Значение2=Неопределено)
	
	СтрокаТЗ = ТЗ.Добавить();
	
	Если Значение1 <> Неопределено Тогда
		СтрокаТЗ[0] = Значение0;
	КонецЕсли;
	
	Если Значение1 <> Неопределено Тогда
		СтрокаТЗ[1] = Значение1;
	КонецЕсли;
	
	Если Значение2 <> Неопределено Тогда
		СтрокаТЗ[2] = Значение2;
	КонецЕсли;
		
КонецПроцедуры

//} СЕРВИСНЫЕ ФУНКЦИИ


//**************************************
//{ ФУНКЦИИ ДЛЯ ПОДКЛЮЧЕНИЯ ТИПОВОГО МОДУЛЯ ДИАДОКА КАК ИСТОЧНИКА ДАННЫХ ДЛЯ ДОКУМЕНТОВ

// Возвращает инициализированный объект типового модуля диадока
Функция ТиповойМодульДиадока()
	
	мРежимОтладки = Ложь;
	
	Если ТиповойМодульДиадока=неопределено Тогда
		
		Попытка
			// вдруг модуль уже был подключен. А мы не можем у менеджера внешних обработок спросить, какие обработки подключены.
			ТиповойМодульДиадока = ВнешниеОбработки.Создать("ТиповойМодульДиадока",Ложь);
		Исключение
			
			Если мРежимОтладки Тогда
				//возьмем файл с диска
				
				ИмяФайлаСМодулем = "c:\temp\Diadoc1C_UF_5_11_07_exports.epf";
				ДД = Новый ДвоичныеДанные(ИмяФайлаСМодулем);
				
			Иначе
				
				//развернем файл из макета
				ДД = ПолучитьМакет("ТиповойМодульДиадок_epf");
				
			КонецЕсли;
			
			АдресВХ = ПоместитьВоВременноеХранилище(ДД);
			ТиповойМодульДиадока = ВнешниеОбработки.Подключить(АдресВХ,"ТиповойМодульДиадока",Ложь);
			УдалитьИзВременногоХранилища(АдресВХ);
			
			ТиповойМодульДиадока = ВнешниеОбработки.Создать("ТиповойМодульДиадока",Ложь);
			
		КонецПопытки;
		
//		ТиповойМодульДиадока.ИнициализироватьМодуль(); // это в ОФ
		ИнициализацияТиповогоМодуляУФ(ТиповойМодульДиадока); // а так будет в УФ
	КонецЕсли;
	
	Возврат ТиповойМодульДиадока;
	
КонецФункции

Процедура ИнициализацияТиповогоМодуляУФ(ТиповойМодульДиадока)
	
	// с этим минимумом он уже взлетает
	ТиповойМодульДиадока.ПараметрыКлиентСервер = Новый Структура;
	
	ТиповойМодульДиадока.ПараметрыКлиентСервер.Вставить("СинонимКонфигурации", Метаданные.Синоним);
	ТиповойМодульДиадока.ПараметрыКлиентСервер.Вставить("ВерсияКонфигурации" , Метаданные.Версия);
	
	ТиповойМодульДиадока.ПараметрыКлиентСервер.Вставить("РежимОтладкиСервера",	Ложь);
	ТиповойМодульДиадока.ПараметрыКлиентСервер.Вставить("ИмяОбработки",			"___");
	ТиповойМодульДиадока.ПараметрыКлиентСервер.Вставить("ПодключаемыйМодуль",	Новый Структура("ИспользоватьМодуль",Ложь));
	
	ТиповойМодульДиадока.ПараметрыКлиентСервер.Вставить("ВременноеХранилище",	Новый Структура);
	
	ТиповойМодульДиадока.ПараметрыКлиентСервер.ВременноеХранилище.Вставить("АдресКэшаСервераНаВремяСеанса",	ПоместитьВоВременноеХранилище(Неопределено));
	ТиповойМодульДиадока.ПараметрыКлиентСервер.ВременноеХранилище.Вставить("АдресНеСуществующиеОбработки",	ПоместитьВоВременноеХранилище(Неопределено));
	ТиповойМодульДиадока.ПараметрыКлиентСервер.ВременноеХранилище.Вставить("АдресПодключенныеОбработки",	ПоместитьВоВременноеХранилище(Неопределено));
	
	ТиповойМодульДиадока.ЗаполнитьМанифест(ТиповойМодульДиадока,"Платформа");
	
	ТиповойМодульДиадока.ПараметрыКлиентСервер.Вставить("МаркерКонфигурации",	ТиповойМодульДиадока.МетодСервера(,"ПолучитьМаркерКонфигурации"));
	ТиповойМодульДиадока.ПараметрыКлиентСервер.Вставить("ИмяФормыИнтеграции",	ТиповойМодульДиадока.МетодСервера(,"ИмяФормыИнтеграции"));
	
КонецПроцедуры

// Трансформация Структуры, выданной типовым модулем Диадока, в XDTO
// Может, стоит затащить это в типовой модуль?
Процедура ЗаполнитьКонтентXDTOПоСтруктуре(Контент,Структура)
	
	Для Каждого Эл Из Структура Цикл
		
		Если ТипЗнч(Эл.Значение)=Тип("Структура") Тогда
			
			Если Эл.Ключ = "ЕдиницаИзмеренияСсылка"
				Или Эл.Ключ = "СсылкаНаЕИ" Тогда
				УстановитьЗначениеXDTO(Контент, Эл.Ключ, Эл.Значение.Ссылка, Истина);
				Продолжить;
			КонецЕсли;
			
			Если НЕ Контент.Свойства().Получить(Эл.Ключ)=Неопределено Тогда
				ЗаполнитьКонтентXDTOПоСтруктуре(Контент[Эл.Ключ],Эл.Значение)
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Эл.Значение)=Тип("Массив")
			Или ТипЗнч(Эл.Значение)=Тип("ТаблицаЗначений") Тогда
			
			ТипСтроки = Контент.Свойства().Получить(Эл.Ключ).Тип.Имя;
			
			Если ТипЗнч(Эл.Значение) = Тип("ТаблицаЗначений") Тогда
				_Массив = ОсновнойМодуль.ТаблицаЗначений_2_МассивСтруктур(Эл.Значение);
			Иначе
				_Массив = Эл.Значение;
			КонецЕсли;
			
			Для Каждого ЭлементМассива Из _Массив Цикл
				
				НовЭлемент = Контент[Эл.Ключ].Добавить(НовыйКонтент(ТипСтроки));
				ЗаполнитьКонтентXDTOПоСтруктуре(НовЭлемент,ЭлементМассива)
			
			КонецЦикла;
			
		ИначеЕсли ЗначениеЗаполнено(Эл.Значение) Тогда
			
			Если НЕ Контент.Свойства().Получить(Эл.Ключ)=Неопределено Тогда
				
				Если Эл.Ключ = "Price" Тогда
					
					Попытка
						Контент.Price = Эл.Значение;
					Исключение
						Контент.Price = Число(Эл.Значение);
					КонецПопытки;
					
				Иначе
					
					УстановитьЗначениеXDTO(Контент, Эл.Ключ, Эл.Значение, ЭтоИмяСвойстваСсылки(Эл.Ключ));
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	
КонецПроцедуры

Функция ЭтоИмяСвойстваСсылки(Имя)
	Возврат (
			Имя = "ВалютаСсылка" Или
			Имя = "СтранаПроисхожденияСсылка" Или
			Имя = "ЕдиницаИзмеренияСсылка" Или
			Имя = "Ссылка" Или
			Имя = "СсылкаНаЕИ"
	);
КонецФункции
                                 
//} ФУНКЦИИ ДЛЯ ПОДКЛЮЧЕНИЯ ТИПОВОГО МОДУЛЯ ДИАДОКА КАК ИСТОЧНИКА ДАННЫХ ДЛЯ ДОКУМЕНТОВ


//**************************************
//{		ПОДКЛЮЧЕНИЕ ВО ВНЕШНИЕ ОБРАБОТКИ
	
&Насервере
Функция СведенияОВнешнейОбработке() Экспорт
	
	ПараметрыРегистрации = Новый Структура;
	ПараметрыРегистрации.Вставить("Вид",			 	"ДополнительнаяОбработка");
	ПараметрыРегистрации.Вставить("Наименование", 		"Диадок (СКБ Контур): Подключаемый модуль");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", 	Ложь);
	ПараметрыРегистрации.Вставить("Версия", 			"1.0");
	ПараметрыРегистрации.Вставить("Информация", 		"Модуль работы с электронными первичными документами через Диадок (подключаемая часть)");
	
	ТаблицаКоманд = ПолучитьТаблицуКоманд();
	
	ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

&Насервере
Функция ПолучитьТаблицуКоманд()
	
	Команды = Новый ТаблицаЗначений;
	
	Команды.Колонки.Добавить("Представление", 			Новый ОписаниеТипов("Строка")); 
	Команды.Колонки.Добавить("Идентификатор", 			Новый ОписаниеТипов("Строка"));
	Команды.Колонки.Добавить("Использование", 			Новый ОписаниеТипов("Строка"));
	Команды.Колонки.Добавить("ПоказыватьОповещение", 	Новый ОписаниеТипов("Булево"));
	Команды.Колонки.Добавить("Модификатор", 			Новый ОписаниеТипов("Строка"));
	
	Возврат Команды;
	
КонецФункции

&Насервере
Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
	
	НоваяКоманда=						ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление=			Представление;
	НоваяКоманда.Идентификатор=			Идентификатор;
	НоваяКоманда.Использование=			Использование;
	НоваяКоманда.ПоказыватьОповещение=	ПоказыватьОповещение;
	НоваяКоманда.Модификатор=			Модификатор;
	
КонецПроцедуры

//}		ПОДКЛЮЧЕНИЕ ВО ВНЕШНИЕ ОБРАБОТКИ


//**************************************
//{ СОБЫТИЯ ПОДКЛЮЧАЕМОГО МОДУЛЯ

// Обработка всех событий подключаемого модуля
Функция ОбработатьСобытие(ИмяСобытия,Параметры) Экспорт
	
	Если ИмяСобытия = "ПослеПодготовкиПакета" Тогда
		
		//ПослеПодготовкиПакета(Параметры.Пакет);
		Возврат Неопределено;
		
	ИначеЕсли ИмяСобытия = "ПодготовитьЭлектронныйДокумент" Тогда
		
		ПодготовитьЭлектронныйДокумент(Параметры.Результат,Параметры.ВидДокументаРазвернутый,Параметры.ДополнительныеПараметры);
		Возврат Неопределено;
		
	ИначеЕсли ИмяСобытия = "ПолучитьТекстЗапросаДляСпискаПакетовНаОтправку" Тогда
		
		Возврат ПолучитьТекстЗапросаДляВидаПакета(Параметры.ВидПакетаРазвернутый); // для построения списка пакетов на отправку
		
	ИначеЕсли ИмяСобытия = "ПодготовитьПакет" Тогда
		
		ПодготовитьПакет(Параметры.ВидПакетаРазвернутый, Параметры.СтрокаСписка, Параметры.Пакет); // для подготовки единичного пакета
		Возврат Неопределено;
		
	ИначеЕсли ИмяСобытия = "ПолучитьТаблицуИспользуемыхПакетов" Тогда
		
		Возврат ПолучитьТаблицуИспользуемыхПакетов();
		
	ИначеЕсли ИмяСобытия = "ПолучитьТаблицуИспользуемыхВидовДокументов" Тогда
		
		Возврат ПолучитьТаблицуИспользуемыхВидовДокументов();
		
	ИначеЕсли ИмяСобытия = "ПолучитьЗаполненныйОбъектДокумента1С" Тогда
		
		Возврат ПолучитьЗаполненныйОбъектДокумента1С(Параметры);
		
	ИначеЕсли ИмяСобытия = "ПровестиАнализДокумента" Тогда
		
		//
		
	ИначеЕсли ИмяСобытия = "НайтиСопоставлениеДокумента" Тогда
		
		Возврат НайтиСопоставлениеДокумента(Параметры);
		
	КонецЕсли;
	
КонецФункции

// Тут можно переопределить отправителя/получателя/подразделения/заблокированность/тестовость
// Но можно закинуть и в код подготовки пакета.
Процедура ПослеПодготовкиПакета(Пакет)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ВЫБОР
	|		КОГДА Диадок_ЮрФизЛица.ID_ВладелецПодразделения <> """"
	|			ТОГДА Диадок_ЮрФизЛица.ID_ВладелецПодразделения
	|		ИНАЧЕ Диадок_ЮрФизЛица.ID
	|	КОНЕЦ КАК ID
	|ИЗ
	|	Справочник.Диадок_ЮрФизЛица КАК Диадок_ЮрФизЛица
	|ГДЕ
	|	Диадок_ЮрФизЛица.СвязанныйСправочник1 = &СвязанныйСправочник1"   //это можно и в коробку попробовать
	);
	Запрос.УстановитьПараметр("СвязанныйСправочник1",Пакет.Данные1С.Организация);
	Пакет.ДанныеДД.OrganizationId = ОсновнойМодуль.ЭДО_Служебные_ПолучитьРезультатЗапроса(Запрос, "ID");
	
	Запрос.УстановитьПараметр("СвязанныйСправочник1",Пакет.Данные1С.Контрагент);
	Пакет.ДанныеДД.CounteragentId = ОсновнойМодуль.ЭДО_Служебные_ПолучитьРезультатЗапроса(Запрос, "ID");
	
	//1. FromDepartmentId - по Организации
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Диадок_ЮрФизЛица.ID КАК ID
	|ИЗ
	|	Справочник.Диадок_ЮрФизЛица КАК Диадок_ЮрФизЛица
	|ГДЕ
	|	Диадок_ЮрФизЛица.СвязанныйСправочник1 = &СвязанныйСправочник1
	|	И Диадок_ЮрФизЛица.ИмяСправочника = ""ПодразделенияОрганизаций"""
	);
	Запрос.УстановитьПараметр("СвязанныйСправочник1",Пакет.Данные1С.Организация);
	Пакет.ДанныеДД.FromDepartmentId = ОсновнойМодуль.ЭДО_Служебные_ПолучитьРезультатЗапроса(Запрос, "ID");
	
	//2. ToDepartmentId - по Договору
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Диадок_ЮрФизЛица.ID КАК ID
	|ИЗ
	|	Справочник.Диадок_ЮрФизЛица КАК Диадок_ЮрФизЛица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК спрДоговорыКонтрагентов
	|		ПО (спрДоговорыКонтрагентов.Ссылка = &ТекущийДоговор)
	|			И Диадок_ЮрФизЛица.СвязанныйСправочник2 = спрДоговорыКонтрагентов.Родитель
	|			И (Диадок_ЮрФизЛица.СвязанныйСправочник2 ССЫЛКА Справочник.ДоговорыКонтрагентов)
	|			И (Диадок_ЮрФизЛица.ИмяСправочника = ""ПодразделенияКонтрагентов"")"
	);
	Запрос.УстановитьПараметр("ТекущийДоговор",Пакет.Данные1С.Документ.ДоговорКонтрагента);
	Пакет.ДанныеДД.ToDepartmentId = ОсновнойМодуль.ЭДО_Служебные_ПолучитьРезультатЗапроса(Запрос, "ID");
	
//	Пакет.ДанныеДД.DelaySend = Истина; //отладка
	
КонецПроцедуры

// Основная точка входа для подготовки исходящего документа
Функция ПодготовитьЭлектронныйДокумент(Результат, ВидДокументаРазвернутый, ДополнительныеПараметры)

	Документ1С					= Результат.Документ1С;
	ВидДокументаНаименование	= ВидДокументаРазвернутый.Наименование;
	ТипКонтента					= ВидДокументаРазвернутый.ТипКонтента;
	
	Если ВРЕГ(ТипКонтента)=ВРЕГ("UtdSellerContent") Тогда
		
		Если ТипЗнч(Документ1С) = Тип("ДокументСсылка.НДС_СчетФактураВыданный") Тогда
			мФункция = "Invoice";
			ТабличнаяЧасть = ПолучитьТаблицуСпецификацииПоДокументу(Документ1С.ДокументОснование, Документ1С);
			Заполнить_UtdSellerContentScf(Результат.Content, Документ1С, мФункция, ТабличнаяЧасть);
			
		ИначеЕсли ТипЗнч(Документ1С) = Тип("ДокументСсылка.РеализацияУслуги") Тогда
			мФункция = "Basic";
			Заполнить_UtdSellerContentRlz(Результат.Content, Документ1С, мФункция, ДополнительныеПараметры.СчетФактура);
			
		ИначеЕсли ТипЗнч(Документ1С) = Тип("ДокументСсылка.УслугиОказанные") Тогда
			мФункция = "Basic";
			ТабличнаяЧасть = ПолучитьТаблицуСпецификацииПоДокументу(Документ1С, неопределено);
			Заполнить_UtdSellerContentScf(Результат.Content, Документ1С, мФункция, ТабличнаяЧасть);
			
		Иначе
			мФункция = "InvoiceAndBasic";
			//
		КонецЕсли;
	
	Иначе
		
		ВызватьИсключение "Неизвестный тип документа: "+ВидДокументаНаименование;
		
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьПодпись(КонтентПодписи, ФИО, Должность)
	
	КонтентПодписи.FirstName	= ФИО.Имя;
	КонтентПодписи.SurName		= ФИО.Фамилия;
	КонтентПодписи.Patronymic	= ФИО.Отчество;
	
	КонтентПодписи.JobTitle		= Должность;
	
КонецПроцедуры

// Шаблонная функция для вывода внешней печатной формы.
// Если все ок, возвращает Истина
// Результат сохраняется в параметрах ИмяВремФайла и ПредставлениеФайла. Первые 3 параметра - входные.
Функция СформироватьВнешнююПечатнуюФорму(Документ,	ВнешняяПечатнаяФорма, ДопПараметры=Неопределено, ИмяВремФайла, ПредставлениеФайла)
	
	РезультатПечати = Неопределено;
			
	ОбъектыНазначения = Новый Массив;
	ОбъектыНазначения.Добавить(Документ);
	ПараметрыВывода = Неопределено;
	ПараметрыИсточника = Новый Структура("ИдентификаторКоманды,ОбъектыНазначения","ТранзакционныйОтчет",ОбъектыНазначения);
	ОбъектыПечати = Новый СписокЗначений;
	
	МодульДополнительныеОтчетыИОбработки = ОбщегоНазначения.ОбщийМодуль("ДополнительныеОтчетыИОбработки");
	
	МодульДополнительныеОтчетыИОбработки.ПечатьПоВнешнемуИсточнику(ВнешняяПечатнаяФорма,
		ПараметрыИсточника, РезультатПечати, ОбъектыПечати, ПараметрыВывода);
		
	Если НЕ ТипЗнч(РезультатПечати)=Тип("ТаблицаЗначений")
		Или РезультатПечати.Количество()<>1 Тогда
		ВызватьИсключение "Не удалось сформировать печатную форму """ + ВнешняяПечатнаяФорма + """ объекта " + Документ;
	КонецЕсли;
	
	ИмяВремФайла = ПолучитьИмяВременногоФайла();
	
	РезультатПечати[0].ТабличныйДокумент.Записать(ИмяВремФайла,ТипФайлаТабличногоДокумента.PDF);
	
	ПредставлениеФайла = РезультатПечати[0].СинонимМакета + " № " + Документ.Номер + " от " + Формат(Документ.Дата,"ДФ=dd.MM.yyyy") + ".pdf";
			
	Возврат Истина; // все ок
	
КонецФункции

Функция ПолучитьТекстЗапросаДляВидаПакета(ВидПакетаРазвернутый)
	
	Если НЕ ВидПакетаРазвернутый.Свойство("ID") Тогда
		Сообщить("Отсутствует ID для пакета: " + ВидПакетаРазвернутый.Наименование);
		Возврат Неопределено;
	КонецЕсли;
	
	Если ВидПакетаРазвернутый.ID = "ID_ОсновнойПакет" Тогда
		
		Возврат 
		"ВЫБРАТЬ
		|	Диадок_НастройкиКонтрагентов.Организация.СвязанныйСправочник1 КАК Организация1С,
		|	Диадок_НастройкиКонтрагентов.Контрагент.СвязанныйСправочник1 КАК Контрагент1С,
		|	Диадок_НастройкиКонтрагентов.Организация КАК Организация,
		|	Диадок_НастройкиКонтрагентов.Контрагент КАК Контрагент,
		|	Диадок_НастройкиКонтрагентов.Организация.ID,
		|	Диадок_НастройкиКонтрагентов.Контрагент.ID,
		|	Диадок_НастройкиКонтрагентов.Организация.ID_ОсновноеПодразделение КАК ПодразделениеОрганизацииID,
		|	Диадок_НастройкиКонтрагентов.Контрагент.ID_ОсновноеПодразделение КАК ПодразделениеКонтрагентаID
		|ПОМЕСТИТЬ КэшКонтрагентов
		|ИЗ
		|	РегистрСведений.Диадок_НастройкиКонтрагентов КАК Диадок_НастройкиКонтрагентов
		|ГДЕ
		|	Диадок_НастройкиКонтрагентов.ИмяСвойства = ""Статус""
		|	И Диадок_НастройкиКонтрагентов.Значение = ""IsMyCounteragent""
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Организация,
		|	Контрагент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Ссылка КАК Документ,
		|	РеализацияТоваровУслуг.Номер КАК НомерДокумента,
		|	РеализацияТоваровУслуг.Дата КАК ДатаДокумента,
		|	РеализацияТоваровУслуг.Контрагент КАК Контрагент,
		|	РеализацияТоваровУслуг.Учреждение КАК Организация,
		|	РеализацияТоваровУслуг.СуммаДокумента КАК СуммаДокумента,
		|	Диадок_ПакетыДокументов.Ссылка КАК Пакет
		|ИЗ
		|	Документ.НДС_СчетФактураВыданный КАК РеализацияТоваровУслуг
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КэшКонтрагентов КАК КэшКонтрагентов
		|		ПО (КэшКонтрагентов.Контрагент1С = РеализацияТоваровУслуг.Контрагент)
		|			И (КэшКонтрагентов.Организация1С = РеализацияТоваровУслуг.Учреждение)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Диадок_ПакетыДокументов КАК Диадок_ПакетыДокументов
		|		ПО РеализацияТоваровУслуг.Ссылка = Диадок_ПакетыДокументов.Документ
		|ГДЕ
		|	РеализацияТоваровУслуг.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|	И РеализацияТоваровУслуг.Проведен
		|	И Диадок_ПакетыДокументов.Ссылка ЕСТЬ NULL";
		
	Иначе
		
		//ВызватьИсключение "Неизвестный вид пакета: " + ВидПакетаРазвернутый.ID;	
		Сообщить("Неизвестный ID пакета: " + ВидПакетаРазвернутый.ID);
		
	КонецЕсли;
	
КонецФункции

Функция ПодготовитьПакет(ВидПакетаРазвернутый, СтрокаСписка, Пакет)
	
	Если ВидПакетаРазвернутый.Наименование = "Основной пакет" Тогда
		
		СчетФактура = СтрокаСписка.Документ;
		Акт = СчетФактура.ДокументОснование; 
		Если Не ЗначениеЗаполнено(Акт) Тогда
			ВызватьИсключение "Отсутствует Акт по документу " + Акт;
		КонецЕсли;

		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("СчетФактура", СчетФактура);
		
		ОсновнойМодуль.ЭДО_ДокументМенеджер_ПодготовитьИДобавитьДокументВПакет(Пакет,	СчетФактура,	"ID_СчетФактура_UPD");
		ОсновнойМодуль.ЭДО_ДокументМенеджер_ПодготовитьИДобавитьДокументВПакет(Пакет,	Акт,			"ID_Акт_UPD", ДополнительныеПараметры);
		
	Иначе
		
		ВызватьИсключение "Неизвестный вид пакета: " + ВидПакетаРазвернутый.Наименование;	
		
	КонецЕсли;
	
КонецФункции

//Определение используемых пакетов
Функция ПолучитьТаблицуИспользуемыхПакетов()
	
	ТЗ  = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("ID");
	ТЗ.Колонки.Добавить("Наименование");
	
	ДобавитьСтрокуВТаблицуЗначений(ТЗ, "ID_ОсновнойПакет",	"Основной пакет");
	
	Возврат ТЗ;
	
КонецФункции

//Определение используемых видов документов, включаемых в пакеты
Функция ПолучитьТаблицуИспользуемыхВидовДокументов()
	
	ТЗ  = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("ID");
	ТЗ.Колонки.Добавить("Наименование");
	ТЗ.Колонки.Добавить("ТипДокумента");
	
	ДобавитьСтрокуВТаблицуЗначений(ТЗ, "ID_СчетФактура_UPD", 	"Счет-фактура (УПД)", 	"UtdInvoice");
	ДобавитьСтрокуВТаблицуЗначений(ТЗ, "ID_Акт_UPD", 	"Акт (УПД)", 	"UtdAcceptanceCertificate");

	Возврат ТЗ;
	
КонецФункции

//} СОБЫТИЯ ПОДКЛЮЧАЕМОГО МОДУЛЯ

//{ ПРИКЛАДНЫЕ ПРОЦЕДУРЫ

Функция ПолучитьКодРегионаПоНаименованию(РегионНаименование)
	
	Результат = "";
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	АдресныйКлассификатор.КодРегионаВКоде
		|ИЗ
		|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
		|ГДЕ
		|	АдресныйКлассификатор.Наименование + "" "" + АдресныйКлассификатор.Сокращение = &Наименование
		|	И АдресныйКлассификатор.ТипАдресногоЭлемента = 1";
	
	Запрос.УстановитьПараметр("Наименование", РегионНаименование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Результат = ВыборкаДетальныеЗаписи.КодРегионаВКоде;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьБанковскиеДанные(Контрагент)
	
	Результат = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	БанковскиеИКазначейскиеСчета.Ссылка,
		|	БанковскиеИКазначейскиеСчета.Код КАК Счет,
		|	Банки.Код КАК БИК,
		|	Банки.КоррСчет КАК КоррСчет,
		|	Банки.Наименование КАК БанкНаименование,
		|	Банки.Город КАК БанкГород,
		|	Банки.Адрес КАК БанкАдрес
		|ИЗ
		|	Справочник.БанковскиеИКазначейскиеСчета КАК БанковскиеИКазначейскиеСчета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Банки КАК Банки
		|		ПО БанковскиеИКазначейскиеСчета.КассовыйОрган = Банки.Ссылка
		|ГДЕ
		|	БанковскиеИКазначейскиеСчета.Владелец = &Владелец";
	
	Запрос.УстановитьПараметр("Владелец", Контрагент);
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаРезультатов = РезультатЗапроса.Выгрузить();
	
	Если ТаблицаРезультатов.Количество()>0 Тогда
		УправлениеКонтактнойИНформацией.ПеренестиСтрокуТаблицыВСтруктуру(ТаблицаРезультатов, ТаблицаРезультатов[0], Результат);
	Иначе
		Результат.Вставить("КоррСчет","");	
		Результат.Вставить("Счет","");	
		Результат.Вставить("БанкНаименование","");	
		Результат.Вставить("БИК","");	
	КонецЕсли;

	Возврат Результат;	
	
КонецФункции

Функция ПлоучитьТипКонтрагента(Контрагент)
	
	Результат = Новый Структура;
	
	// здесь нужно реализовать вычисление типа контрагента:
	// - резидент
	// - не резидент
	// - ИП
	// в конфигурации БГУ - этой инфы нет, по этому:
	
	Результат.Вставить("Тип", "LegalEntity");
	Результат.Вставить("РегИнфо", неопределено);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьКонтактнуюИнформацию(ЮрЛицо, ВидАдреса)
	
	Результат = Новый Структура;
	
	НаборЗаписей = Неопределено;	
	ВидКонтрагента = Перечисления.ВидыКонтрагентов.Организация;
	ВидКИЮрАдресКонтрагента = ВидАдреса;
	ТипКИАдрес = Перечисления.ТипыКонтактнойИнформации.Адрес;
	ТипКИТелефон = Перечисления.ТипыКонтактнойИнформации.Телефон;
	ТипКИЕмейл = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
	
	УправлениеКонтактнойИНформацией.ПрочитатьКонтактнуюИнформацию(НаборЗаписей, ЮрЛицо, ВидКонтрагента);
	Для Каждого Запись из НаборЗаписей Цикл
		
		СтруктураАдреса0 = УправлениеКонтактнойИНформацией.ПолучитьСтруктуруЗаписиРегистра(Запись);
		Если СтруктураАдреса0.Вид = ВидКИЮрАдресКонтрагента И СтруктураАдреса0.Тип = ТипКИАдрес Тогда
			СтруктураАдреса1 = СтруктураАдреса0;
			//АдресСтрокой = УправлениеКонтактнойИНформацией.ПолучитьПолныйАдрес(Запись);
			//СтруктураАдреса2 = УправлениеКонтактнойИНформацией.ПолучитьСтруктуруАдресаИзСтроки(АдресСтрокой);
		КонецЕсли;
		Если СтруктураАдреса0.Тип = ТипКИТелефон Тогда
			Телефон = СтруктураАдреса0.Представление;
		КонецЕсли;
		Если СтруктураАдреса0.Тип = ТипКИЕмейл Тогда
			Емейл = СтруктураАдреса0.Представление;
		КонецЕсли;
		
	КонецЦикла;
	
	Результат.Вставить("Телефон", Телефон);	
	Результат.Вставить("Емейл", Емейл);	
	Результат.Вставить("СтруктураАдреса", СтруктураАдреса1);	
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьКонтактнуюИнформациюКонтрагента(Контрагент)
	
	Возврат ПолучитьКонтактнуюИнформацию(Контрагент, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
	
КонецФункции

Функция ПолучитьКонтактнуюИнформациюОрганизаци(Организация)
	
	Возврат ПолучитьКонтактнуюИнформацию(Организация, Справочники.ВидыКонтактнойИнформации.ЮрАдресУчреждения);
	
КонецФункции

Функция ПолучитьСпецификациюАкта(Документ, Начисление)
	
	Результат = Новый Структура;
	
	Результат.Вставить("Номенклатура", 		Документ.Номенклатура);
	Результат.Вставить("Наименование", 		Документ.Номенклатура.Наименование);
	Результат.Вставить("ЕдиницаИзмерения",	Документ.Номенклатура.ЕдиницаИзмерения.Наименование);
	Результат.Вставить("ТипНоменклатуры",	ПолучитьТипНоменклатуры(Документ.Номенклатура.ТипНоменклатуры));
	Результат.Вставить("Цена", 				Документ.Цена);
	Результат.Вставить("ТипЦены", 			Документ.ТипЦены.Наименование);
	Результат.Вставить("СуммаВключаетНДС", 	Документ.СуммаВключаетНДС);
	Результат.Вставить("СтавкаНДС", 		ПолучитьСтавкуНДСВстроке(Документ.СтавкаНДС));
	Результат.Вставить("ВалютаДокумента", 	Документ.ВалютаДокумента);
	Результат.Вставить("КурсВзаиморасчетов",Документ.КурсВзаиморасчетов);
	
	Результат.Вставить("Количество", 		Начисление.Количество);
	Результат.Вставить("СуммаБезНДС", 		Начисление.Сумма);
	Результат.Вставить("НДС", 				Начисление.СуммаНДС);
	Результат.Вставить("СуммаСНДС", 		Начисление.Всего);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьТипНоменклатуры(ТипНоменклатуры)
	
	Результат = "NotSpecified";
	
	Если ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда
		Результат = "Job";
	ИначеЕсли ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
		Результат = "Service";
	Иначе
		Результат = "Other";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСтавкуНДСВстроке(Ставка)
	
	Результат = "0";
	
	Если Ставка = Перечисления.СтавкиНДС.НДС10_110 Тогда
		Результат = "10/110";
	ИначеЕсли Ставка = Перечисления.СтавкиНДС.НДС18_118 Тогда
		Результат = "18/118";
	ИначеЕсли Ставка = Перечисления.СтавкиНДС.БезНДС Тогда
		Результат = "без НДС";
	ИначеЕсли Ставка = Перечисления.СтавкиНДС.НДС0 Тогда
		Результат = "0";
	ИначеЕсли Ставка = Перечисления.СтавкиНДС.НДС10 Тогда
		Результат = "10";
	ИначеЕсли Ставка = Перечисления.СтавкиНДС.НДС18 Тогда
		Результат = "18";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СоздатьПустуюТаблицуСпецификации()
	
	ТипСтрока = Новый ОписаниеТипов("Строка");
	ТипЧисло  = Новый ОписаниеТипов("Число");
	ТипБулево = Новый ОписаниеТипов("Булево");
	ТипДата   = Новый ОписаниеТипов("Дата");
	
	ТаблицаСпецификации = Новый ТаблицаЗначений;
	
	ТаблицаСпецификации.Колонки.Добавить("Номенклатура", 		Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаСпецификации.Колонки.Добавить("Наименование", 		ТипСтрока);
	ТаблицаСпецификации.Колонки.Добавить("ЕдиницаИзмерения", 	ТипСтрока);
	ТаблицаСпецификации.Колонки.Добавить("ТипНоменклатуры", 	ТипСтрока);
	ТаблицаСпецификации.Колонки.Добавить("СтавкаНДС", 			ТипСтрока);
	
	ТаблицаСпецификации.Колонки.Добавить("ТипЦены", 			ТипСтрока);
	ТаблицаСпецификации.Колонки.Добавить("СуммаВключаетНДС", 	ТипБулево);
	ТаблицаСпецификации.Колонки.Добавить("ВалютаДокумента", 	ТипСтрока);
	ТаблицаСпецификации.Колонки.Добавить("КурсВзаиморасчетов", 	ТипЧисло);
	
	ТаблицаСпецификации.Колонки.Добавить("Цена", 				ТипЧисло);
	ТаблицаСпецификации.Колонки.Добавить("Количество", 			ТипЧисло);
	ТаблицаСпецификации.Колонки.Добавить("СуммаБезНДС", 		ТипЧисло);
	ТаблицаСпецификации.Колонки.Добавить("НДС", 				ТипЧисло);
	ТаблицаСпецификации.Колонки.Добавить("СуммаСНДС", 			ТипЧисло);
	
	Возврат ТаблицаСпецификации;
	
КонецФункции

Функция ПолучитьТаблицуСпецификацииПоДокументу(Документ, СчетФактура)
	
	ТаблицаСпецификации = СоздатьПустуюТаблицуСпецификации();
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.РеализацияУслуги") Тогда
		ЗаполнитьТаблицуСпецификации_РеализацияУслуги(Документ, ТаблицаСпецификации, СчетФактура);
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.УслугиОказанные") Тогда
		ЗаполнитьТаблицуСпецификации_УслугиОказанные(Документ, ТаблицаСпецификации);
	КонецЕсли;
	
	Возврат ТаблицаСпецификации;
	
КонецФункции

Функция ЗаполнитьТаблицуСпецификации_РеализацияУслуги(Документ, ТаблицаСпецификации, СчетФактура)
	
	Начисление = НайтиНачислениеРУпоСФ(СчетФактура);
	СтрокаТЧ = ТаблицаСпецификации.Добавить();
	
	СтрокаТЧ.Номенклатура =			Документ.Номенклатура;
	СтрокаТЧ.Наименование = 		Документ.Номенклатура.Наименование;
	СтрокаТЧ.ЕдиницаИзмерения =		Документ.Номенклатура.ЕдиницаИзмерения.Наименование;
	СтрокаТЧ.ТипНоменклатуры = 		ПолучитьТипНоменклатуры(Документ.Номенклатура.ТипНоменклатуры);
	СтрокаТЧ.Цена =					Документ.Цена;
	СтрокаТЧ.ТипЦены =				Документ.ТипЦены.Наименование;
	СтрокаТЧ.СуммаВключаетНДС =		Документ.СуммаВключаетНДС;
	СтрокаТЧ.СтавкаНДС =			ПолучитьСтавкуНДСВстроке(Документ.СтавкаНДС);
	СтрокаТЧ.ВалютаДокумента =		Документ.ВалютаДокумента;
	СтрокаТЧ.КурсВзаиморасчетов =	Документ.КурсВзаиморасчетов;
	
	СтрокаТЧ.Количество =			Начисление.Количество;
	СтрокаТЧ.СуммаБезНДС =			Начисление.Сумма;
	СтрокаТЧ.НДС = 					Начисление.СуммаНДС;
	СтрокаТЧ.СуммаСНДС = 			Начисление.Всего;
	
	Возврат "";
	
КонецФункции

Функция ЗаполнитьТаблицуСпецификации_УслугиОказанные(Документ, ТаблицаСпецификации)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УслугиОказанныеУслуги.НомерСтроки,
		|	УслугиОказанныеУслуги.Номенклатура,
		|	УслугиОказанныеУслуги.Количество,
		|	УслугиОказанныеУслуги.Цена,
		|	УслугиОказанныеУслуги.Сумма,
		|	УслугиОказанныеУслуги.СтавкаНДС,
		|	УслугиОказанныеУслуги.СуммаНДС,
		|	УслугиОказанныеУслуги.Всего,
		|	УслугиОказанныеУслуги.ЕдиницаИзмерения
		|ИЗ
		|	Документ.УслугиОказанные.Услуги КАК УслугиОказанныеУслуги
		|ГДЕ
		|	УслугиОказанныеУслуги.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Документ);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДЗ = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДЗ.Следующий() Цикл

		СтрокаТЧ = ТаблицаСпецификации.Добавить();
		СтрокаТЧ.Номенклатура =			ВыборкаДЗ.Номенклатура;
		СтрокаТЧ.Наименование = 		ВыборкаДЗ.Номенклатура.Наименование;
		СтрокаТЧ.ЕдиницаИзмерения =		ВыборкаДЗ.Номенклатура.ЕдиницаИзмерения.Наименование;
		СтрокаТЧ.ТипНоменклатуры = 		ПолучитьТипНоменклатуры(ВыборкаДЗ.Номенклатура.ТипНоменклатуры);
		СтрокаТЧ.Цена =					ВыборкаДЗ.Цена;
		СтрокаТЧ.СтавкаНДС =			ПолучитьСтавкуНДСВстроке(ВыборкаДЗ.СтавкаНДС);
		СтрокаТЧ.Количество =			ВыборкаДЗ.Количество;
		СтрокаТЧ.СуммаБезНДС =			ВыборкаДЗ.Сумма;
		СтрокаТЧ.НДС = 					ВыборкаДЗ.СуммаНДС;
		СтрокаТЧ.СуммаСНДС = 			ВыборкаДЗ.Всего;
		СтрокаТЧ.ТипЦены =				Документ.ТипЦены.Наименование;
		СтрокаТЧ.СуммаВключаетНДС =		Документ.СуммаВключаетНДС;
		СтрокаТЧ.ВалютаДокумента =		Документ.ВалютаДокумента.Наименование;
		СтрокаТЧ.КурсВзаиморасчетов =	Документ.КурсВзаиморасчетов;
		
	КонецЦикла;
	
	Возврат "";
	
КонецФункции

Функция НайтиНачислениеРУпоСФ(СчетФактура)
	
	ДокРУ = СчетФактура.ДокументОснование;
	Результат = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ  ПЕРВЫЕ 1
		|	РеализацияУслугиНачисления.НомерСтроки
		|ИЗ
		|	Документ.РеализацияУслуги.Начисления КАК РеализацияУслугиНачисления
		|ГДЕ
		|	РеализацияУслугиНачисления.Ссылка = &Ссылка
		|	И РеализацияУслугиНачисления.СчетФактура = &СчетФактура";
	
	Запрос.УстановитьПараметр("Ссылка", ДокРУ);
	Запрос.УстановитьПараметр("СчетФактура", СчетФактура);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДЗ = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДЗ.Следующий() Цикл
		Результат = ВыборкаДЗ.НомерСтроки; 
	КонецЦикла;
	
	Возврат ДокРУ.Начисления.Найти(Результат, "НомерСтроки");
	
КонецФункции

Функция ПроверкаКорректностиЗаполненияРеквизитовКонтрагента(Контрагент)
	
	Результат = Истина;
	ТекстОшибки = "";
	
	КИСтруктура = ПолучитьКонтактнуюИнформациюКонтрагента(Контрагент);
	СтруктураАдреса = КИСтруктура.СтруктураАдреса;
	
	Если СтрДлина(Контрагент.ИНН) < 8 Тогда
		Результат = Ложь;
		ТекстОшибки = ТекстОшибки + "Контрагент: " + Контрагент + " не корректный ИНН: " + Контрагент.ИНН + Символы.ПС;
	КонецЕсли;
	
	Если СтрДлина(СтруктураАдреса.Поле1) <> 6 Тогда
		Результат = Ложь;
		ТекстОшибки = ТекстОшибки + "Контрагент: " + Контрагент + " не корректный индекс: " + СтруктураАдреса.Поле1 + Символы.ПС;
	КонецЕсли;
	
	КодРегиона = ПолучитьКодРегионаПоНаименованию(СтруктураАдреса.Поле2);
	Если СтрДлина(КодРегиона) <> 2 Тогда
		Результат = Ложь;
		ТекстОшибки = ТекстОшибки + "Контрагент: " + Контрагент + " не корректно указан регион (код региона): " + КодРегиона + Символы.ПС;
	КонецЕсли;
	
	Если не Результат Тогда
		//Сообщить(ТекстОшибки);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Подбор документа из 1С, соответствующего электронному документу в ДД
Функция НайтиСопоставлениеДокумента(Параметры)
	
	ДокументДД 	= Параметры.ДокументДД;
	ПакетДД 	= Параметры.ПакетДД;
	
	СтруктураДанных = Новый Структура("Номер, Дата, Тип, Сумма, Контрагент, Организация, ДокументВ1С, Статус");	
	ОсновнойМодуль.ЭДО_ЗаполнитьРеквизитыФормыВходящегоДокумента(СтруктураДанных, ДокументДД, ПакетДД);	

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",	СтруктураДанных.Организация);
	Запрос.УстановитьПараметр("Контрагент",		СтруктураДанных.Контрагент);
	Запрос.УстановитьПараметр("ДатаДокумента",	СтруктураДанных.Дата);
	Запрос.УстановитьПараметр("НомерДокумента",	СтруктураДанных.Номер);
	
	Если СтруктураДанных.Тип = "XmlAcceptanceCertificate" ИЛИ СтруктураДанных.Тип = "UniversalTransferDocument" Тогда
				
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПоступлениеТоваровУслуг.Ссылка
		|ИЗ
		|	Документ.УслугиСтороннихОрганизаций КАК ПоступлениеТоваровУслуг
		|ГДЕ
		|	НЕ ПоступлениеТоваровУслуг.ПометкаУдаления
		|	И ПоступлениеТоваровУслуг.Учреждение = &Организация
		|	И ПоступлениеТоваровУслуг.Контрагент = &Контрагент
		|	И ПоступлениеТоваровУслуг.ДатаПервичногоДокумента = &ДатаДокумента
		|	И ПоступлениеТоваровУслуг.НомерПервичногоДокумента = &НомерДокумента";
	    		
	ИначеЕсли СтруктураДанных.Тип = "Invoice" Тогда
	
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СчетФактураПолученный.Ссылка
		|ИЗ
		|	Документ.НДС_СчетФактураПолученный КАК СчетФактураПолученный
		|ГДЕ
		|	НЕ СчетФактураПолученный.ПометкаУдаления
		|	И СчетФактураПолученный.Учреждение = &Организация
		|	И СчетФактураПолученный.Контрагент = &Контрагент
		|	И СчетФактураПолученный.ДатаПервичногоДокумента = &ДатаДокумента
		|	И СчетФактураПолученный.НомерПервичногоДокумента = &НомерДокумента";
			
	КонецЕсли;

	Если ЗначениеЗаполнено(Запрос.Текст) Тогда
		Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// создание документа
Функция ПолучитьЗаполненныйОбъектДокумента1С(Параметры)
	
	Отказ = Ложь;
	ДокументОбъект = Неопределено;
	
	Контент		= Параметры.Контент;
	ДокументДД 	= Параметры.ДокументДД;
	ПакетДД 	= Параметры.ПакетДД;
	
	КлючиСтруктурыДанных = "Номер, Дата, Тип, Сумма, Контрагент, Организация, ДокументВ1С, Статус";
	СтруктураДанных = Новый Структура(КлючиСтруктурыДанных);	
	ОсновнойМодуль.ЭДО_ЗаполнитьРеквизитыФормыВходящегоДокумента(СтруктураДанных, ДокументДД, ПакетДД);	

	Если ЭтоАкт(ДокументДД) Тогда  
		
		ТекстXML = ОсновнойМодуль.ДвоичныеДанные_В_Текст(ОсновнойМодуль.ЭДО_ПолучитьХранилищеКонтента(ДокументДД)); // контента может не быть, если он слишком большой
		ДеревоКонтента = ОсновнойМодуль.XML_В_XDTO(ТекстXML);
		
		ДокументОбъект = Документы.УслугиСтороннихОрганизаций.СоздатьДокумент();
		
		ДокументОбъект.Контрагент				 = СтруктураДанных.Контрагент;
		ДокументОбъект.Учреждение				 = СтруктураДанных.Организация;			
		ДокументОбъект.ДатаПервичногоДокумента	 = СтруктураДанных.Дата;
		ДокументОбъект.НомерПервичногоДокумента	 = СтруктураДанных.Номер;
		ДокументОбъект.ВидОперации 				 = Справочники.ВидыОпераций.УслугиСтороннихОрганизаций_ПриобретениеУПоставщика;
		
		ДокументОбъект.Дата						 = ТекущаяДата();
		//ДокументОбъект.Ответственный			= ПараметрыСеанса.ТекущийПользователь;
		ДокументОбъект.СуммаВключаетНДС			= Ложь;
		ДокументОбъект.КратностьВзаиморасчетов	= 1;
		ДокументОбъект.КурсВзаиморасчетов		= 1;
		ДокументОбъект.ВалютаДокумента			= Константы.ВалютаРегламентированногоУчета.Получить();
		
		// Акт в старом формате
		Если  СтруктураДанных.Тип = "XmlAcceptanceCertificate" И ДокументДД.ТипКонтента = "" Тогда
			
			ТабличнаяЧасть = СписокXDTOИзЭлемента(ДеревоКонтента.Документ.СвАктИ.ОписРабот);
			Для Каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
			
				Работа = СтрокаТЧ.Работа;
				Если ТипЗнч(Работа) = Тип("СписокXDTO") Тогда
					
					Кол = Работа.Количество();
					Для Сч = 0 по Кол-1 Цикл
						
						РекТЧ = ПолучитьРеквизитыТЧАкта1(Работа[Сч]);
						Отказ = РазименоватьНоменклатуру(РекТЧ) или Отказ;
						Если не Отказ Тогда
							ДобавитьСтрокуТЧ(ДокументОбъект, РекТЧ);
						КонецЕсли;
						
					КонецЦикла;
					
				ИначеЕсли ТипЗнч(Работа) = Тип("ОбъектXDTO") Тогда
					
					РекТЧ = ПолучитьРеквизитыТЧАкта1(Работа);
					Отказ = РазименоватьНоменклатуру(РекТЧ) или Отказ;
					Если не Отказ Тогда
						ДобавитьСтрокуТЧ(ДокументОбъект, РекТЧ);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// Акт в новом формате
		Если  СтруктураДанных.Тип = "XmlAcceptanceCertificate" И ДокументДД.ТипКонтента = "UniversalTransferDocument" Тогда
			
			Работа = ДеревоКонтента.Документ.ТаблСчФакт.СведТов;
				Если ТипЗнч(Работа) = Тип("СписокXDTO") Тогда
					
					Кол = Работа.Количество();
					Для Сч = 0 по Кол-1 Цикл
						
						РекТЧ = ПолучитьРеквизитыТЧАкта2(Работа[Сч]);
						Отказ = РазименоватьНоменклатуру(РекТЧ) или Отказ;
						Если не Отказ Тогда
							ДобавитьСтрокуТЧ(ДокументОбъект, РекТЧ);
						КонецЕсли;	
						
					КонецЦикла;
				ИначеЕсли ТипЗнч(Работа) = Тип("ОбъектXDTO") Тогда
					
					РекТЧ = ПолучитьРеквизитыТЧАкта2(Работа);
					Отказ = РазименоватьНоменклатуру(РекТЧ) или Отказ;
					Если не Отказ Тогда
						ДобавитьСтрокуТЧ(ДокументОбъект, РекТЧ);
					КонецЕсли;	
						
				КонецЕсли;
				
		КонецЕсли;
			
		ДокументОбъект.Записать();
		
	КонецЕсли;
	
	Если ЭтоСчетФактура(Параметры.ДокументДД) Тогда
		
		ТекстXML = ОсновнойМодуль.ДвоичныеДанные_В_Текст(ОсновнойМодуль.ЭДО_ПолучитьХранилищеКонтента(ДокументДД)); // контента может не быть, если он слишком большой
		ДеревоКонтента = ОсновнойМодуль.XML_В_XDTO(ТекстXML);
		
		ДокументОбъект = ЗагрузитьЭлектронныйСчетФактуруВСчетФактуру(Параметры.ДокументДД, Параметры.ПакетДД, Параметры.Контент);
			
	КонецЕсли;
	
	// Завершение
	Если Отказ Тогда
		ВызватьИсключение "Присутствуют несопоставленные номенклатурные позиции!";
	Иначе	
		Возврат ДокументОбъект;
	КонецЕсли;
	
КонецФункции

Процедура ДобавитьСтрокуТЧ(ДокументОбъект, РекТЧ)
	
			// Создание строки ТЧ нового документа -------------------------------
			
			СтрокаДокумента = ДокументОбъект.Услуги.Добавить();
			
			СтрокаДокумента.Номенклатура		= РекТЧ.Номенклатура;
			СтрокаДокумента.ЕдиницаИзмерения	= РекТЧ.ЕдиницаИзмерения;
			СтрокаДокумента.Содержание			= "";
			СтрокаДокумента.Количество			= РекТЧ.Количество;
			//СтрокаДокумента.Цена				= Цена;
			СтрокаДокумента.Сумма				= РекТЧ.СуммаБезНДС;
			//СтрокаДокумента.СтавкаНДС 			= ПолучитьСтавкуНДСДиадок(РекТЧ.СтавкаНДС);
			СтрокаДокумента.СуммаНДС			= РекТЧ.СуммаНДС;
			СтрокаДокумента.Всего				= РекТЧ.СуммаСНДС;
	
КонецПроцедуры

Функция РазименоватьНоменклатуру(РекТЧ)
	
	Отказ = ложь;
	Номенклатура = НайтиНоменклатуруПоРеквизиту("Наименование", РекТЧ.Описание);
			
	Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
		Сообщить("Не найдена номенклатура: " + РекТЧ.Описание, СтатусСообщения.Важное);
		Отказ = Истина;
		Возврат Отказ;
	КонецЕсли;
			
	ЕдиницаИзмерения = ПолучитьЕдиницуИзмерения(Номенклатура, РекТЧ.НаимЕдИзм);
	
	РекТЧ.Вставить("Номенклатура", Номенклатура);
	РекТЧ.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
	
	Возврат Отказ;
	
КонецФункции

Функция ПолучитьРеквизитыТЧАкта1(Работа)
	
	РекТЧ = Новый Структура;
	
	РекТЧ.Вставить("Описание", Работа.Описание);
	РекТЧ.Вставить("Количество", Работа.Количество);
	РекТЧ.Вставить("Цена", Работа.Цена);
	РекТЧ.Вставить("СуммаБезНДС", Работа.СумБезНДС);
	РекТЧ.Вставить("СуммаСНДС", Работа.СумУчНДС);

	Если Работа.Свойства().Получить("СтавкаНДС") <> Неопределено Тогда
		РекТЧ.Вставить("СтавкаНДС", Работа.СтавкаНДС);
	Иначе	
		РекТЧ.Вставить("СтавкаНДС", "");
	КонецЕсли;
				
	Если Работа.Свойства().Получить("СумНДС") <> Неопределено Тогда
		РекТЧ.Вставить("СуммаНДС", Работа.СумНДС);
	Иначе	
		РекТЧ.Вставить("СуммаНДС", 0);
	КонецЕсли;
				
	Если Работа.Свойства().Получить("НаимЕдИзм") <> Неопределено Тогда
		РекТЧ.Вставить("НаимЕдИзм", Работа.НаимЕдИзм);
	Иначе	
		РекТЧ.Вставить("НаимЕдИзм", "");
	КонецЕсли;
				
	Возврат РекТЧ;
	
КонецФункции

Функция ПолучитьРеквизитыТЧАкта2(Работа)
	
	РекТЧ = Новый Структура;
	
	РекТЧ.Вставить("Описание", Работа.НаимТов);
	РекТЧ.Вставить("Количество", Работа.КолТов);
	РекТЧ.Вставить("Цена", Работа.ЦенаТов);
	
	РекТЧ.Вставить("СуммаБезНДС", Работа.СтТовБезНДС);
	РекТЧ.Вставить("СуммаСНДС", Работа.СтТовУчНал);
	РекТЧ.Вставить("СуммаНДС", Работа.СумНал.СумНал);
		
	Если Работа.Свойства().Получить("ДопСведТов") <> Неопределено Тогда
		Если Работа.ДопСведТов.Свойства().Получить("КодТов") <> Неопределено Тогда
			РекТЧ.Вставить("КодТовара", Работа.ДопСведТов.КодТов);
		КонецЕсли;
		Если Работа.ДопСведТов.Свойства().Получить("НаимЕдИзм") <> Неопределено Тогда
			РекТЧ.Вставить("НаимЕдИзм", Работа.ДопСведТов.НаимЕдИзм);
		Иначе	
			РекТЧ.Вставить("НаимЕдИзм", "");
		КонецЕсли;
	КонецЕсли;

	Если Работа.Свойства().Получить("НалСт") <> Неопределено Тогда
		РекТЧ.Вставить("СтавкаНДС", Работа.НалСт);
	КонецЕсли;
			
	Возврат РекТЧ;
	
КонецФункции

Функция ЭтоНакладная(ДокументДД)

	Если ДокументДД.ТипДокумента = "XmlTorg12" Тогда

		Возврат Истина;

	КонецЕсли;

	Возврат Ложь;

КонецФункции

Функция ЭтоАкт(ДокументДД)

	Если ДокументДД.ТипДокумента = "XmlAcceptanceCertificate" Тогда

		Возврат Истина;

	КонецЕсли;

	Возврат Ложь;

КонецФункции

Функция ЭтоСчетФактура(ДокументДД)

	Если ДокументДД.ТипДокумента = "Invoice" Тогда

		Возврат Истина;

	КонецЕсли;

	Возврат Ложь;

КонецФункции

Функция ЭтоУПД(ДокументДД)
  	
 	Если ДокументДД.ТипДокумента = "UniversalTransferDocument" Тогда
 		
 		Возврат Истина;
 		
 	КонецЕсли;
 	
 	Возврат Ложь;
 	
 КонецФункции

Функция СписокXDTOИзЭлемента(Элемент) Экспорт
	
	Если ТипЗнч(Элемент) = Тип("СписокXDTO") Тогда
		Возврат Элемент;
	Иначе
		Список = Новый Массив;
		Список.Добавить(Элемент);
		Возврат Список;
	КонецЕсли;
	
КонецФункции

Функция НайтиНоменклатуруПоРеквизиту(ИмяРеквизита, ЗначениеРеквизита)
	
	Если НЕ ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
		Результат = Неопределено;
	Иначе		
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура."+ИмяРеквизита+" = &ЗначениеРеквизита");
		
		Запрос.УстановитьПараметр("ЗначениеРеквизита", ЗначениеРеквизита);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			
			Если Выборка.Количество() = 1 Тогда
				Выборка.Следующий();
				Результат = Выборка.Ссылка;
			Иначе
				Результат = Неопределено;
			КонецЕсли;
		Иначе
			Результат = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСтавкуНДСДиадок(TaxRate)
	
	TaxRate= Лев(TaxRate, 2);
	TaxRate= СтрЗаменить(TaxRate, "%", "");
	
	Если TaxRate = "10" Тогда
		Возврат Перечисления.СтавкиНДС.НДС10;
	ИначеЕсли TaxRate = "18" Тогда
		Возврат Перечисления.СтавкиНДС.НДС18;
	ИначеЕсли TaxRate = "0" Тогда
		Возврат Перечисления.СтавкиНДС.НДС0;
	Иначе
		Возврат Перечисления.СтавкиНДС.БезНДС;
	КонецЕсли;

КонецФункции

Функция ПолучитьЕдиницуИзмерения(Номенклатура, НаимЕдИзм)
	
	Если ЗначениеЗаполнено(Номенклатура.ЕдиницаИзмерения) Тогда
		Возврат Номенклатура.ЕдиницаИзмерения;
	Иначе
		Возврат Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию(НаимЕдИзм);
	КонецЕсли;
	
КонецФункции

Функция ЗагрузитьЭлектронныйСчетФактуруВСчетФактуру(ДокументДД, ПакетДД, Контент)
	
	СчетФактураПолученный 			= Документы.НДС_СчетФактураПолученный.СоздатьДокумент();
	
	
		МассивСсылокДокументовОснований = Новый Массив;
		
		Для Каждого документИзПакета Из ПолучитьДокументыПакета(ПакетДД) Цикл
			Если ЗначениеЗаполнено(документИзПакета.Документ) Тогда
				МассивСсылокДокументовОснований.Добавить(документИзПакета.Документ);
			КонецЕсли;
		КонецЦикла;
		
		Если МассивСсылокДокументовОснований.Количество() = 0 Тогда
			ВызватьИсключение "Невозможно определить связанные документы ""Услуги сторонних организаций""";
		КонецЕсли;
		
		Если МассивСсылокДокументовОснований.Количество()>1 Тогда
			
			ЗаполнитьСчетФактуруПолученнуюНаОснованииМассиваСсылокРНК(СчетФактураПолученный, МассивСсылокДокументовОснований);
			
		ИначеЕсли МассивСсылокДокументовОснований.Количество() = 1 Тогда  
			
			ДокументОснование = МассивСсылокДокументовОснований[0];
			
		КонецЕсли;
		
	
	СчетФактураПолученный.Заполнить(ДокументОснование);
	
	//Попытка
	//	ПараметрыСФ= Вычислить("УчетНДСПереопределяемый.ПолучитьПараметрыСчетаФактуры(СчетФактураПолученный)");
	//Исключение
	//	ПараметрыСФ= Вычислить("УчетНДСПереопределяемый.ПараметрыСчетаФактуры(СчетФактураПолученный)");
	//КонецПопытки;
	
	//ПараметрыСФ = Новый Структура;
	//ПараметрыСФ.Вставить("СуммаДокумента",0);
	//
	//Если НЕ ПараметрыСФ=Неопределено Тогда
	//	СчетФактураПолученный.СуммаДокумента = ПараметрыСФ.СуммаДокумента;
	//	Если НЕ СчетФактураПолученный.Метаданные().Реквизиты.Найти("СуммаНДСДокумента")=Неопределено Тогда
	//		СчетФактураПолученный.СуммаНДСДокумента = ПараметрыСФ.СуммаНДСДокумента;
	//	КонецЕсли;
	//КонецЕсли;
	
	ЗаполнитьРеквизитыСчетФактурыПолученной(СчетФактураПолученный, СформироватьДеревоКонтента(Контент));
	
	Возврат СчетФактураПолученный;
	
КонецФункции

Процедура ЗаполнитьРеквизитыСчетФактурыПолученной(СчетФактураПолученный, деревоКонтента)
	
	ИсходныеДанные = Неопределено;
	
	СчетФактураПолученный.НомерПервичногоДокумента 	= деревоКонтента.Документ.СвСчФакт.НомерСчФ;
	СчетФактураПолученный.ДатаПервичногоДокумента 	= ДатаПоСтроке(деревоКонтента.Документ.СвСчФакт.ДатаСчФ);	
	
	СчетФактураПолученный.КодВидаОперации = "01";
	//СчетФактураПолученный.КодСпособаПолучения = 2;
	
	ДатаПоставки = ?(СчетФактураПолученный.ДокументыОснования.Количество()>0,  СчетФактураПолученный.ДокументыОснования[0].ДокументОснование.Дата, Неопределено);
	//ДатаВходящегоДокумента = СчетФактураПолученный.ДатаВходящегоДокумента;
	
	//ПериодЗакрытияМесяца = ТиповойМодульДиадока().МетодСервера(,"ПолучитьКоличествоДнейОтсрочки", СчетФактураПолученный.Организация);
	
	СчетФактураПолученный.Дата = ТекущаяДата();
	//ПолучитьДатуУчетаСФ(ДатаПоставки, СчетФактураПолученный.ДатаВходящегоДокумента, ПериодЗакрытияМесяца);
	
	
	СчетФактураПолученный.СуммаДокумента = деревоКонтента.Документ.ТаблСчФакт.ВсегоОпл.СтТовУчНалВсего;
	СчетФактураПолученный.СуммаНДС = деревоКонтента.Документ.ТаблСчФакт.ВсегоОпл.СумНалВсего.СумНал;
	
КонецПроцедуры

Функция ПолучитьДокументыПакета(ПакетДД)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|выбрать
	|	ддДок.Ссылка
	|из
	|	справочник.Диадок_Документы как ддДок
	|где
	|	ддДок.Пакет = &Пакет";
	Запрос.УстановитьПараметр("Пакет", ПакетДД);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция СформироватьДеревоКонтента(Контент)
	
	ТекстXML = ОсновнойМодуль.ДвоичныеДанные_В_Текст(Контент);
	Возврат ОсновнойМодуль.XML_В_XDTO(ТекстXML);
	
КонецФункции

Функция ДатаПоСтроке(строкаДаты)
	
	Возврат Дата(Сред(строкаДаты, 7, 4), Сред(строкаДаты, 4, 2), Сред(строкаДаты, 1, 2));
	
КонецФункции

Функция ПолучитьДатуУчетаСФ(ДатаПоставки, ДатаУчета, ПериодЗакрытияМесяца)
	
	Если ЗначениеЗаполнено(ДатаПоставки) Тогда
		
		ДатаОкончанияМесяца		= КонецМесяца(ДатаПоставки) + ПериодЗакрытияМесяца*24*3600;
		ДатаОкончанияКвартала	= КонецКвартала(ДатаПоставки) + ПериодЗакрытияМесяца*24*3600;
		
		Если ДатаУчета <= ДатаОкончанияМесяца Тогда
			Возврат ДатаПоставки;
		ИначеЕсли ДатаУчета <= ДатаОкончанияКвартала Тогда
			Возврат КонецКвартала(ДатаПоставки);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаУчета)=Истина Тогда
		Возврат ДатаУчета;
	Иначе
		Возврат ТекущаяДата();
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьСчетФактуруПолученнуюНаОснованииМассиваСсылокРНК(СчетФактураПолученный, МассивСсылокРНК)
	
	Инд = 1;
	Для каждого Эл Из МассивСсылокРНК Цикл
		Если Инд = 1 Тогда
			СчетФактураПолученный.Заполнить(МассивСсылокРНК[0]);
		Иначе
			СтрОсн = СчетФактураПолученный.ДокументыОснования.Добавить();
			СтрОсн.ДокументОснование = Эл;
		КонецЕсли;
		
		Инд = Инд + 1;
	КонецЦикла;
	
КонецПроцедуры

//} ПРИКЛАДНЫЕ ПРОЦЕДУРЫ                                  

//**************************************
//{	МЕТОДЫ ДЛЯ ЗАПОЛНЕНИЯ КОНТЕНТА

//#КонецОбласти

Процедура Заполнить_AcceptanceCertificateBuyerContent(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/AcceptanceCertificateBuyerContent.html

	УстановитьЗначениеXDTO(Контент, "Complaints",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "SignatureDate",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "AdditionalInfo",			Неопределено);

	Заполнить_Official						(Контент.Official, Неопределено);
	Заполнить_Attorney						(Контент.Attorney, Неопределено);
	Заполнить_Signer						(Контент.Signer, Неопределено);

КонецПроцедуры

Процедура Заполнить_AcceptanceCertificateContent(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/AcceptanceCertificateContent.html

	УстановитьЗначениеXDTO(Контент, "Date",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Number",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Grounds",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Total",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "VAT",						Неопределено);


КонецПроцедуры

Процедура Заполнить_AcceptanceCertificateItem(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/AcceptanceCertificateItem.html

	УстановитьЗначениеXDTO(Контент, "Name",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Description",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "UnitCode",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "UnitName",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Quantity",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Price",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "TotalWithVatExcluded",		Неопределено);
	УстановитьЗначениеXDTO(Контент, "Vat",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Total",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "AdditionalInfo",			Неопределено);


КонецПроцедуры

Процедура Заполнить_AcceptanceCertificateSellerContent(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/AcceptanceCertificateSellerContent.html

	УстановитьЗначениеXDTO(Контент, "Date",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Number",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Title",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "SignatureDate",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "AdditionalInfo",			Неопределено);

	Заполнить_OrganizationInfo				(Контент.Seller, Неопределено);
	Заполнить_Official						(Контент.Official, Неопределено);
	Заполнить_Attorney						(Контент.Attorney, Неопределено);
	Заполнить_Signer						(Контент.Signer, Неопределено);


	ТипСтроки = Контент.Свойства().Получить("Items").Тип.Имя;
	Для Сч=1 По 0 Цикл
		
		НовЭлемент = Контент.Items.Добавить(НовыйКонтент(ТипСтроки));
		Заполнить_AcceptanceCertificateItem(НовЭлемент, Неопределено);
	
	КонецЦикла;


КонецПроцедуры

Процедура Заполнить_AcceptanceContent(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/AcceptanceContent.html



КонецПроцедуры

Процедура Заполнить_AdditionalInfoId(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/AdditionalInfoId.html

	УстановитьЗначениеXDTO(Контент, "InfoFileId",				Неопределено);



	ТипСтроки = Контент.Свойства().Получить("StructedAdditionalInfos").Тип.Имя;
	Для Сч=1 По 0 Цикл
		
		НовЭлемент = Контент.StructedAdditionalInfos.Добавить(НовыйКонтент(ТипСтроки));
		Заполнить_StructedAdditionalInfos(НовЭлемент, Неопределено);
	
	КонецЦикла;


КонецПроцедуры

Процедура Заполнить_AdditionalInfoItem(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/AdditionalInfoItem.html

	УстановитьЗначениеXDTO(Контент, "Key",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Value",					Неопределено);


КонецПроцедуры

Процедура Заполнить_AddressInfo(Контент, СтруктураАдреса)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/AddressInfo.html

	Если СтруктураАдреса = неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	УстановитьЗначениеXDTO(Контент, "IsForeign",				Ложь);
	УстановитьЗначениеXDTO(Контент, "ZipCode",					СтруктураАдреса.Поле1);
	УстановитьЗначениеXDTO(Контент, "RegionCode",				ПолучитьКодРегионаПоНаименованию(СтруктураАдреса.Поле2));
	УстановитьЗначениеXDTO(Контент, "Territory",				СтруктураАдреса.Поле3);
	УстановитьЗначениеXDTO(Контент, "City",						СтруктураАдреса.Поле4);
	УстановитьЗначениеXDTO(Контент, "Locality",					СтруктураАдреса.Поле5);
	УстановитьЗначениеXDTO(Контент, "Street",					СтруктураАдреса.Поле6);
	УстановитьЗначениеXDTO(Контент, "Building",					СтруктураАдреса.Поле7);
	УстановитьЗначениеXDTO(Контент, "Block",					СтруктураАдреса.Поле8);
	УстановитьЗначениеXDTO(Контент, "Apartment",				СтруктураАдреса.Поле9);
	УстановитьЗначениеXDTO(Контент, "CountryCode",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "AddressText",				СтруктураАдреса.Представление);
	УстановитьЗначениеXDTO(Контент, "AddressCode",				Неопределено);

КонецПроцедуры

Процедура Заполнить_AmountsDiff(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/AmountsDiff.html

	УстановитьЗначениеXDTO(Контент, "Excise",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "TotalWithVatExcluded",		Неопределено);
	УстановитьЗначениеXDTO(Контент, "Vat",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Total",					Неопределено);


КонецПроцедуры

Процедура Заполнить_Attorney(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/Attorney.html

	УстановитьЗначениеXDTO(Контент, "Date",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Number",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "IssuerAdditionalInfo",		Неопределено);
	УстановитьЗначениеXDTO(Контент, "IssuerOrganizationName",	Неопределено);
	УстановитьЗначениеXDTO(Контент, "RecipientAdditionalInfo",	Неопределено);

	Заполнить_Official						(Контент.Issuer, Неопределено);
	Заполнить_Official						(Контент.Recipient, Неопределено);

КонецПроцедуры

Процедура Заполнить_BaseContent(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/BaseContent.html

	УстановитьЗначениеXDTO(Контент, "Type",						Неопределено);


КонецПроцедуры

Процедура Заполнить_BaseDocumentName(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/BaseDocumentName.html

	УстановитьЗначениеXDTO(Контент, "BaseDocumentDate",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "BaseDocumentNumber",		Неопределено);
	УстановитьЗначениеXDTO(Контент, "BaseDocumentName",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "AdditionalInfo",			Неопределено);


КонецПроцедуры

Процедура Заполнить_ContractContent(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/ContractContent.html

	УстановитьЗначениеXDTO(Контент, "Date",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Number",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Price",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "ContractType",				Неопределено);


КонецПроцедуры

Процедура Заполнить_CorrectionRequestContent(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/CorrectionRequestContent.html

	УстановитьЗначениеXDTO(Контент, "Comment",					Неопределено);

	Заполнить_Signer						(Контент.Signer, Неопределено);

КонецПроцедуры

Процедура Заполнить_CustomDeclaration(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/CustomDeclaration.html

	УстановитьЗначениеXDTO(Контент, "CountryCode",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "DeclarationNumber",		Неопределено);


КонецПроцедуры

Процедура Заполнить_Employee(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/Employee.html

	УстановитьЗначениеXDTO(Контент, "EmployeePosition",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "EmployeeInfo",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "EmployeeBase",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "Surname",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "FirstName",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "Patronymic",				Неопределено);


КонецПроцедуры

Процедура Заполнить_EventContent(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/EventContent.html

	УстановитьЗначениеXDTO(Контент, "CostChangeInfo",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "TransferDocDetails",		Неопределено);
	УстановитьЗначениеXDTO(Контент, "OperationContent",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "NotificationDate",			Неопределено);



	ТипСтроки = Контент.Свойства().Получить("CorrectionBases").Тип.Имя;
	Для Сч=1 По 0 Цикл
		
		НовЭлемент = Контент.CorrectionBases.Добавить(НовыйКонтент(ТипСтроки));
		Заполнить_BaseDocumentName(НовЭлемент, Неопределено);
	
	КонецЦикла;


КонецПроцедуры

Процедура Заполнить_ExtendedInvoiceCorrectionItem(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/ExtendedInvoiceCorrectionItem.html

	УстановитьЗначениеXDTO(Контент, "Product",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "ItemAccountDebit",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "ItemAccountCredit",		Неопределено);

	Заполнить_InvoiceItemFields				(Контент.OriginalValues, Неопределено);
	Заполнить_InvoiceItemFields				(Контент.CorrectedValues, Неопределено);
	Заполнить_AmountsDiff					(Контент.AmountsInc, Неопределено);
	Заполнить_AmountsDiff					(Контент.AmountsDec, Неопределено);


	ТипСтроки = Контент.Свойства().Получить("StructedAdditionalInfos").Тип.Имя;
	Для Сч=1 По 0 Цикл
		
		НовЭлемент = Контент.StructedAdditionalInfos.Добавить(НовыйКонтент(ТипСтроки));
		Заполнить_StructedAdditionalInfos(НовЭлемент, Неопределено);
	
	КонецЦикла;


КонецПроцедуры

Процедура Заполнить_ExtendedInvoiceItem(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/ExtendedInvoiceItem.html

	УстановитьЗначениеXDTO(Контент, "Product",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "UnitCode",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "UnitName",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Quantity",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Price",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Excise",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "TaxRate",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "SubtotalWithVatExcluded",	Неопределено);
	УстановитьЗначениеXDTO(Контент, "Vat",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Subtotal",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "ItemMark",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "AdditionalProperty",		Неопределено);
	УстановитьЗначениеXDTO(Контент, "VendorCode",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "ToRelease",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "AccountDebit",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "AccountCredit",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "СсылкаНаЕИ",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "СтранаПроисхожденияСсылка",Неопределено);
	УстановитьЗначениеXDTO(Контент, "ЕдиницаИзмеренияСсылка",	Неопределено);



	ТипСтроки = Контент.Свойства().Получить("CustomDeclarations").Тип.Имя;
	Для Сч=1 По 0 Цикл
		
		НовЭлемент = Контент.CustomDeclarations.Добавить(НовыйКонтент(ТипСтроки));
		Заполнить_CustomDeclaration(НовЭлемент, Неопределено);
	
	КонецЦикла;



	ТипСтроки = Контент.Свойства().Получить("StructedAdditionalInfos").Тип.Имя;
	Для Сч=1 По 0 Цикл
		
		НовЭлемент = Контент.StructedAdditionalInfos.Добавить(НовыйКонтент(ТипСтроки));
		Заполнить_AdditionalInfoItem(НовЭлемент, Неопределено);
	
	КонецЦикла;


КонецПроцедуры

Процедура Заполнить_ExtendedInvoiceItemScf(Контент, СтрТЧ)

	УстановитьЗначениеXDTO(Контент, "Product",					СтрТЧ.Наименование);
	УстановитьЗначениеXDTO(Контент, "UnitCode",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "UnitName",					СтрТЧ.ЕдиницаИзмерения);
	УстановитьЗначениеXDTO(Контент, "Quantity",					СтрТЧ.Количество);
	УстановитьЗначениеXDTO(Контент, "Price",					СтрТЧ.Цена);
	УстановитьЗначениеXDTO(Контент, "Excise",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "TaxRate",					СтрТЧ.СтавкаНДС);
	УстановитьЗначениеXDTO(Контент, "SubtotalWithVatExcluded",	СтрТЧ.СуммаБезНДС);
	УстановитьЗначениеXDTO(Контент, "Vat",						СтрТЧ.НДС);
	УстановитьЗначениеXDTO(Контент, "Subtotal",					СтрТЧ.СуммаСНДС);
	УстановитьЗначениеXDTO(Контент, "ItemMark",					СтрТЧ.ТипНоменклатуры);
	УстановитьЗначениеXDTO(Контент, "AdditionalProperty",		Неопределено);
	УстановитьЗначениеXDTO(Контент, "VendorCode",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "ToRelease",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "AccountDebit",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "AccountCredit",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "СсылкаНаЕИ",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "СтранаПроисхожденияСсылка",Неопределено);
	УстановитьЗначениеXDTO(Контент, "ЕдиницаИзмеренияСсылка",	Неопределено);

КонецПроцедуры

Процедура Заполнить_ExtendedOrganizationInfo(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/ExtendedOrganizationInfo.html

	УстановитьЗначениеXDTO(Контент, "BoxId",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Name",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Inn",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Kpp",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "FnsParticipantId",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "Type",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Okopf",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Okpo",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Okpd",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Phone",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Email",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "CorrespondentAccount",		Неопределено);
	УстановитьЗначениеXDTO(Контент, "BankAccountNumber",		Неопределено);
	УстановитьЗначениеXDTO(Контент, "BankName",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "BankId",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Department",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "AdditionalInfo",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "OrganizationOrPersonInfo",	Неопределено);
	УстановитьЗначениеXDTO(Контент, "IndividualEntityRegistrationCertificate",Неопределено);
	УстановитьЗначениеXDTO(Контент, "Ссылка",					Неопределено);

	Заполнить_AddressInfo					(Контент.Address, Неопределено);

КонецПроцедуры

Процедура Заполнить_ExtendedOrganizationInfoOrg(Контент, Организация)

	КИСтруктура = ПолучитьКонтактнуюИнформациюОрганизаци(Организация);
	ТипКонтрагента = ПлоучитьТипКонтрагента(Организация);

	УстановитьЗначениеXDTO(Контент, "BoxId",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Name",						Организация.Наименование);
	УстановитьЗначениеXDTO(Контент, "Inn",						Организация.ИНН);
	УстановитьЗначениеXDTO(Контент, "Kpp",						Организация.КПП);
	УстановитьЗначениеXDTO(Контент, "FnsParticipantId",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "Type",						ТипКонтрагента.Тип);
	УстановитьЗначениеXDTO(Контент, "Okopf",					Организация.КодКОПФ.Наименование);
	УстановитьЗначениеXDTO(Контент, "Okpo",						Организация.КодОКПО);
	УстановитьЗначениеXDTO(Контент, "Okpd",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Phone",					КИСтруктура.Телефон);
	УстановитьЗначениеXDTO(Контент, "Email",					КИСтруктура.Емейл);
	УстановитьЗначениеXDTO(Контент, "CorrespondentAccount",		Неопределено);
	УстановитьЗначениеXDTO(Контент, "BankAccountNumber",		Неопределено);
	УстановитьЗначениеXDTO(Контент, "BankName",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "BankId",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Department",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "AdditionalInfo",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "OrganizationOrPersonInfo",	Неопределено);
	УстановитьЗначениеXDTO(Контент, "IndividualEntityRegistrationCertificate",Неопределено);
	УстановитьЗначениеXDTO(Контент, "Ссылка",					Неопределено);

	Заполнить_AddressInfo					(Контент.Address, КИСтруктура.СтруктураАдреса);
	
КонецПроцедуры

Процедура Заполнить_ExtendedOrganizationInfoKont(Контент, Контрагент)

	КИСтруктура = ПолучитьКонтактнуюИнформациюКонтрагента(Контрагент);	
	БанковскиеДанные = ПолучитьБанковскиеДанные(Контрагент);
	ТипКонтрагента = ПлоучитьТипКонтрагента(Контрагент);
	
	УстановитьЗначениеXDTO(Контент, "BoxId",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Name",						Контрагент.Наименование);
	УстановитьЗначениеXDTO(Контент, "Inn",						Контрагент.ИНН);
	УстановитьЗначениеXDTO(Контент, "Kpp",						Контрагент.КПП);
	УстановитьЗначениеXDTO(Контент, "FnsParticipantId",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "Type",						ТипКонтрагента.Тип);
	УстановитьЗначениеXDTO(Контент, "Okopf",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Okpo",						Контрагент.КодОКПО);
	УстановитьЗначениеXDTO(Контент, "Okpd",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Phone",					КИСтруктура.Телефон);
	УстановитьЗначениеXDTO(Контент, "Email",					КИСтруктура.Емейл);
	УстановитьЗначениеXDTO(Контент, "CorrespondentAccount",		БанковскиеДанные.КоррСчет);
	УстановитьЗначениеXDTO(Контент, "BankAccountNumber",		СтрЗаменить(БанковскиеДанные.Счет, " ", ""));
	УстановитьЗначениеXDTO(Контент, "BankName",					БанковскиеДанные.БанкНаименование);
	УстановитьЗначениеXDTO(Контент, "BankId",					БанковскиеДанные.БИК);
	УстановитьЗначениеXDTO(Контент, "Department",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "AdditionalInfo",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "OrganizationOrPersonInfo",	Неопределено);
	УстановитьЗначениеXDTO(Контент, "IndividualEntityRegistrationCertificate", ТипКонтрагента.РегИнфо);
	УстановитьЗначениеXDTO(Контент, "Ссылка",					Неопределено);

	Заполнить_AddressInfo					(Контент.Address, КИСтруктура.СтруктураАдреса);

КонецПроцедуры

Процедура Заполнить_ExtendedSigner(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/ExtendedSigner.html

	УстановитьЗначениеXDTO(Контент, "BoxId",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "CertificateThumbprint",	Неопределено);

	Заполнить_ExtendedSignerDetails			(Контент.SignerDetails, Неопределено);

КонецПроцедуры

Процедура Заполнить_ExtendedSignerDetails(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/ExtendedSignerDetails.html

	УстановитьЗначениеXDTO(Контент, "FirstName",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "Surname",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Patronymic",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "JobTitle",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Inn",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "RegistrationCertificate",	Неопределено);
	УстановитьЗначениеXDTO(Контент, "SignerType",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "OrganizationName",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "SignerInfo",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "Powers",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Status",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "PowersBase",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "OrganizationPowersBase",	Неопределено);


КонецПроцедуры

Процедура Заполнить_FormalizedRejectionContent(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/FormalizedRejectionContent.html

	УстановитьЗначениеXDTO(Контент, "Comment",					Неопределено);

	Заполнить_Signer						(Контент.Signer, Неопределено);

КонецПроцедуры

Процедура Заполнить_InvoiceContent(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/InvoiceContent.html

	УстановитьЗначениеXDTO(Контент, "InvoiceVersion",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "Date",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Number",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "InvoiceRevisionDate",		Неопределено);
	УстановитьЗначениеXDTO(Контент, "InvoiceRevisionNumber",	Неопределено);
	УстановитьЗначениеXDTO(Контент, "Currency",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "ВалютаСсылка",				Неопределено);

	Заполнить_OrganizationInfo				(Контент.Seller, Неопределено);
	Заполнить_OrganizationInfo				(Контент.Buyer, Неопределено);
	Заполнить_ShipperOrConsigneeInfo		(Контент.Shipper, Неопределено);
	Заполнить_ShipperOrConsigneeInfo		(Контент.Consignee, Неопределено);
	Заполнить_Signer						(Контент.Signer, Неопределено);
	Заполнить_InvoiceTotals					(Контент.Totals, Неопределено);


	ТипСтроки = Контент.Свойства().Получить("Items").Тип.Имя;
	Для Сч=1 По 0 Цикл
		
		НовЭлемент = Контент.Items.Добавить(НовыйКонтент(ТипСтроки));
		Заполнить_InvoiceItem(НовЭлемент, Неопределено);
	
	КонецЦикла;



	ТипСтроки = Контент.Свойства().Получить("PaymentDocuments").Тип.Имя;
	Для Сч=1 По 0 Цикл
		
		НовЭлемент = Контент.PaymentDocuments.Добавить(НовыйКонтент(ТипСтроки));
		Заполнить_PaymentDocument(НовЭлемент, Неопределено);
	
	КонецЦикла;



	ТипСтроки = Контент.Свойства().Получить("StructedAdditionalInfos").Тип.Имя;
	Для Сч=1 По 0 Цикл
		
		НовЭлемент = Контент.StructedAdditionalInfos.Добавить(НовыйКонтент(ТипСтроки));
		Заполнить_AdditionalInfoItem(НовЭлемент, Неопределено);
	
	КонецЦикла;


КонецПроцедуры

Процедура Заполнить_InvoiceCorrectionContent(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/InvoiceCorrectionContent.html

	УстановитьЗначениеXDTO(Контент, "InvoiceVersion",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "InvoiceCorrectionDate",	Неопределено);
	УстановитьЗначениеXDTO(Контент, "InvoiceCorrectionNumber",	Неопределено);
	УстановитьЗначениеXDTO(Контент, "InvoiceCorrectionRevisionDate",Неопределено);
	УстановитьЗначениеXDTO(Контент, "InvoiceCorrectionRevisionNumber",Неопределено);
	УстановитьЗначениеXDTO(Контент, "Currency",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "ВалютаСсылка",				Неопределено);



	ТипСтроки = Контент.Свойства().Получить("OriginalInvoices").Тип.Имя;
	Для Сч=1 По 0 Цикл
		
		НовЭлемент = Контент.OriginalInvoices.Добавить(НовыйКонтент(ТипСтроки));
		Заполнить_OriginalInvoice(НовЭлемент, Неопределено);
	
	КонецЦикла;

	Заполнить_OrganizationInfo				(Контент.Seller, Неопределено);
	Заполнить_OrganizationInfo				(Контент.Buyer, Неопределено);
	Заполнить_Signer						(Контент.Signer, Неопределено);


	ТипСтроки = Контент.Свойства().Получить("Items").Тип.Имя;
	Для Сч=1 По 0 Цикл
		
		НовЭлемент = Контент.Items.Добавить(НовыйКонтент(ТипСтроки));
		Заполнить_InvoiceCorrectionItem(НовЭлемент, Неопределено);
	
	КонецЦикла;

	Заполнить_InvoiceTotalsDiff				(Контент.TotalsInc, Неопределено);
	Заполнить_InvoiceTotalsDiff				(Контент.TotalsDec, Неопределено);


	ТипСтроки = Контент.Свойства().Получить("StructedAdditionalInfos").Тип.Имя;
	Для Сч=1 По 0 Цикл
		
		НовЭлемент = Контент.StructedAdditionalInfos.Добавить(НовыйКонтент(ТипСтроки));
		Заполнить_AdditionalInfoItem(НовЭлемент, Неопределено);
	
	КонецЦикла;


КонецПроцедуры

Процедура Заполнить_InvoiceCorrectionItem(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/InvoiceCorrectionItem.html

	УстановитьЗначениеXDTO(Контент, "Product",					Неопределено);

	Заполнить_InvoiceItemFields				(Контент.OriginalValues, Неопределено);
	Заполнить_InvoiceItemFields				(Контент.CorrectedValues, Неопределено);
	Заполнить_AmountsDiff					(Контент.AmountsInc, Неопределено);
	Заполнить_AmountsDiff					(Контент.AmountsDec, Неопределено);


	ТипСтроки = Контент.Свойства().Получить("StructedAdditionalInfos").Тип.Имя;
	Для Сч=1 По 0 Цикл
		
		НовЭлемент = Контент.StructedAdditionalInfos.Добавить(НовыйКонтент(ТипСтроки));
		Заполнить_AdditionalInfoItem(НовЭлемент, Неопределено);
	
	КонецЦикла;


КонецПроцедуры

Процедура Заполнить_InvoiceCorrectionTable(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/InvoiceCorrectionTable.html




	ТипСтроки = Контент.Свойства().Получить("Items").Тип.Имя;
	Для Сч=1 По 0 Цикл
		
		НовЭлемент = Контент.Items.Добавить(НовыйКонтент(ТипСтроки));
		Заполнить_ExtendedInvoiceCorrectionItem(НовЭлемент, Неопределено);
	
	КонецЦикла;

	Заполнить_InvoiceTotalsDiff				(Контент.TotalsInc, Неопределено);
	Заполнить_InvoiceTotalsDiff				(Контент.TotalsDec, Неопределено);

КонецПроцедуры

Процедура Заполнить_InvoiceForCorrectionInfo(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/InvoiceForCorrectionInfo.html

	УстановитьЗначениеXDTO(Контент, "InvoiceDate",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "InvoiceNumber",			Неопределено);



	ТипСтроки = Контент.Свойства().Получить("InvoiceRevisions").Тип.Имя;
	Для Сч=1 По 0 Цикл
		
		НовЭлемент = Контент.InvoiceRevisions.Добавить(НовыйКонтент(ТипСтроки));
		Заполнить_InvoiceRevisionInfo(НовЭлемент, Неопределено);
	
	КонецЦикла;


КонецПроцедуры

Процедура Заполнить_InvoiceItem(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/InvoiceItem.html

	УстановитьЗначениеXDTO(Контент, "CountriesOfOrigin",		Неопределено);
	УстановитьЗначениеXDTO(Контент, "Product",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "UnitCode",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Quantity",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Price",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "TaxRate",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Excise",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "TotalWithVatExcluded",		Неопределено);
	УстановитьЗначениеXDTO(Контент, "Vat",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Total",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "СсылкаНаЕИ",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "СтранаПроисхожденияСсылка",Неопределено);
	УстановитьЗначениеXDTO(Контент, "CustomsDeclarationNumbers",Неопределено);
	УстановитьЗначениеXDTO(Контент, "ЕдиницаИзмеренияСсылка",	Неопределено);



	ТипСтроки = Контент.Свойства().Получить("StructedAdditionalInfos").Тип.Имя;
	Для Сч=1 По 0 Цикл
		
		НовЭлемент = Контент.StructedAdditionalInfos.Добавить(НовыйКонтент(ТипСтроки));
		Заполнить_AdditionalInfoItem(НовЭлемент, Неопределено);
	
	КонецЦикла;


КонецПроцедуры

Процедура Заполнить_InvoiceItemFields(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/InvoiceItemFields.html

	УстановитьЗначениеXDTO(Контент, "UnitCode",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Quantity",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Price",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "TaxRate",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Excise",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "TotalWithVatExcluded",		Неопределено);
	УстановитьЗначениеXDTO(Контент, "Vat",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Total",					Неопределено);


КонецПроцедуры

Процедура Заполнить_InvoiceRevisionInfo(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/InvoiceRevisionInfo.html

	УстановитьЗначениеXDTO(Контент, "RevisionDate",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "RevisionNumber",			Неопределено);


КонецПроцедуры

Процедура Заполнить_InvoiceTable(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/InvoiceTable.html

	УстановитьЗначениеXDTO(Контент, "TotalWithVatExcluded",		Неопределено);
	УстановитьЗначениеXDTO(Контент, "Vat",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Total",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "TotalNet",					Неопределено);



	ТипСтроки = Контент.Свойства().Получить("Items").Тип.Имя;
	Для Сч=1 По 0 Цикл
		
		НовЭлемент = Контент.Items.Добавить(НовыйКонтент(ТипСтроки));
		Заполнить_ExtendedInvoiceItem(НовЭлемент, Неопределено);
	
	КонецЦикла;


КонецПроцедуры

Процедура Заполнить_InvoiceTableScf(Контент, ТЧ)

	УстановитьЗначениеXDTO(Контент, "TotalWithVatExcluded",		ТЧ.Итог("СуммаБезНДС"));
	УстановитьЗначениеXDTO(Контент, "Vat",						ТЧ.Итог("НДС"));
	УстановитьЗначениеXDTO(Контент, "Total",					ТЧ.Итог("СуммаСНДС"));
	УстановитьЗначениеXDTO(Контент, "TotalNet",					неопределено);

	ТипСтроки = Контент.Свойства().Получить("Items").Тип.Имя;
	Для Сч=1 По ТЧ.Количество() Цикл
		
		НовЭлемент = Контент.Items.Добавить(НовыйКонтент(ТипСтроки));
		Заполнить_ExtendedInvoiceItemScf(НовЭлемент, ТЧ[Сч-1]);
	
	КонецЦикла;

КонецПроцедуры

Процедура Заполнить_InvoiceTotals(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/InvoiceTotals.html

	УстановитьЗначениеXDTO(Контент, "TotalWithVatExcluded",		Неопределено);
	УстановитьЗначениеXDTO(Контент, "Vat",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Total",					Неопределено);


КонецПроцедуры

Процедура Заполнить_InvoiceTotalsDiff(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/InvoiceTotalsDiff.html

	УстановитьЗначениеXDTO(Контент, "TotalWithVatExcluded",		Неопределено);
	УстановитьЗначениеXDTO(Контент, "Vat",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Total",					Неопределено);


КонецПроцедуры

Процедура Заполнить_NonformilizedContent(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/NonformilizedContent.html

	УстановитьЗначениеXDTO(Контент, "Date",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Number",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "NeedRecipientSignature",	Неопределено);


КонецПроцедуры

Процедура Заполнить_Official(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/Official.html

	УстановитьЗначениеXDTO(Контент, "FirstName",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "Surname",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Patronymic",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "JobTitle",					Неопределено);


КонецПроцедуры

Процедура Заполнить_OrganizationInfo(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/OrganizationInfo.html

	УстановитьЗначениеXDTO(Контент, "IsSoleProprietor",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "Name",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Inn",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Kpp",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Phone",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Fax",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Okopf",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Okpo",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "BankAccountNumber",		Неопределено);
	УстановитьЗначениеXDTO(Контент, "BankId",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "BankName",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Ссылка",					Неопределено);

	Заполнить_AddressInfo					(Контент.Address, Неопределено);

КонецПроцедуры

Процедура Заполнить_OriginalInvoice(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/OriginalInvoice.html

	УстановитьЗначениеXDTO(Контент, "Date",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Number",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "InvoiceRevisionDate",		Неопределено);
	УстановитьЗначениеXDTO(Контент, "InvoiceRevisionNumber",	Неопределено);


КонецПроцедуры

Процедура Заполнить_OtherIssuer(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/OtherIssuer.html

	УстановитьЗначениеXDTO(Контент, "EmployeePosition",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "EmployeeInfo",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "OrganizationName",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "OrganizationBase",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "EmployeeBase",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "Surname",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "FirstName",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "Patronymic",				Неопределено);


КонецПроцедуры

Процедура Заполнить_PaymentDocument(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/PaymentDocument.html

	УстановитьЗначениеXDTO(Контент, "Date",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Number",					Неопределено);


КонецПроцедуры

Процедура Заполнить_ProformaInvoiceContent(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/ProformaInvoiceContent.html

	УстановитьЗначениеXDTO(Контент, "Date",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Number",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Grounds",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Total",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Vat",						Неопределено);


КонецПроцедуры

Процедура Заполнить_RejectionContent(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/RejectionContent.html

	УстановитьЗначениеXDTO(Контент, "Comment",					Неопределено);


КонецПроцедуры

Процедура Заполнить_Shipper(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/Shipper.html

	УстановитьЗначениеXDTO(Контент, "SameAsSeller",				Неопределено);

	Заполнить_ExtendedOrganizationInfo		(Контент.OrganizationInfo, Неопределено);

КонецПроцедуры

Процедура Заполнить_ShipperOrConsigneeInfo(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/ShipperOrConsigneeInfo.html

	УстановитьЗначениеXDTO(Контент, "IsSoleProprietor",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "Name",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "SameAsSellerOrBuyer",		Неопределено);

	Заполнить_AddressInfo					(Контент.Address, Неопределено);

КонецПроцедуры

Процедура Заполнить_Signer(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/Signer.html

	УстановитьЗначениеXDTO(Контент, "IsSoleProprietor",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "Inn",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "FirstName",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "Surname",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Patronymic",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "JobTitle",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "SoleProprietorRegistrationCertificate",Неопределено);


КонецПроцедуры

Процедура Заполнить_StructedAdditionalInfos(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/StructedAdditionalInfos.html

	УстановитьЗначениеXDTO(Контент, "Key",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Value",					Неопределено);


КонецПроцедуры

Процедура Заполнить_Torg12BuyerContent(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/Torg12BuyerContent.html

	УстановитьЗначениеXDTO(Контент, "ShipmentReceiptDate",		Неопределено);
	УстановитьЗначениеXDTO(Контент, "AdditionalInfo",			Неопределено);

	Заполнить_Attorney						(Контент.Attorney, Неопределено);
	Заполнить_Official						(Контент.Receiver, Неопределено);
	Заполнить_Official						(Контент.Accepter, Неопределено);
	Заполнить_Signer						(Контент.Signer, Неопределено);

КонецПроцедуры

Процедура Заполнить_Torg12Commons(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/Torg12Commons.html

	УстановитьЗначениеXDTO(Контент, "TotalParcelsQuantity",		Неопределено);
	УстановитьЗначениеXDTO(Контент, "TotalGrossQuantity",		Неопределено);
	УстановитьЗначениеXDTO(Контент, "TotalQuantity",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "TotalSum",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "TotalParcelsQuantityInWords",Неопределено);
	УстановитьЗначениеXDTO(Контент, "TotalGrossQuantityInWords",Неопределено);
	УстановитьЗначениеXDTO(Контент, "TotalQuantityInWords",		Неопределено);
	УстановитьЗначениеXDTO(Контент, "TotalSumInWords",			Неопределено);


КонецПроцедуры

Процедура Заполнить_Torg12Item(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/Torg12Item.html

	УстановитьЗначениеXDTO(Контент, "Product",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "ProductCode",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "Feature",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Sort",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Article",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "UnitCode",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "UnitName",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "ParcelsQuantity",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "ParcelType",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "ParcelCapacity",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "GrossQuantity",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "Quantity",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Price",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "TotalWithVatExcluded",		Неопределено);
	УстановитьЗначениеXDTO(Контент, "TaxRate",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Vat",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Total",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "AdditionalInfo",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "ExternalCode",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "СсылкаНаЕИ",				Неопределено);


КонецПроцедуры

Процедура Заполнить_Torg12SellerContent(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/Torg12SellerContent.html

	УстановитьЗначениеXDTO(Контент, "Date",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Number",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "WaybillDate",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "WaybillNumber",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "OperationCode",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "GroundName",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "GroundDate",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "GroundNumber",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "ShipperDepartment",		Неопределено);
	УстановитьЗначениеXDTO(Контент, "ShipperOkdp",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "AttachmentSheetsQuantity",	Неопределено);
	УстановитьЗначениеXDTO(Контент, "SupplyDate",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "AdditionalInfo",			Неопределено);

	Заполнить_OrganizationInfo				(Контент.Seller, Неопределено);
	Заполнить_OrganizationInfo				(Контент.Buyer, Неопределено);
	Заполнить_OrganizationInfo				(Контент.Shipper, Неопределено);
	Заполнить_OrganizationInfo				(Контент.Consignee, Неопределено);


	ТипСтроки = Контент.Свойства().Получить("Items").Тип.Имя;
	Для Сч=1 По 0 Цикл
		
		НовЭлемент = Контент.Items.Добавить(НовыйКонтент(ТипСтроки));
		Заполнить_Torg12Item(НовЭлемент, Неопределено);
	
	КонецЦикла;

	Заполнить_Torg12Totals					(Контент.Totals, Неопределено);
	Заполнить_Torg12Commons					(Контент.Commons, Неопределено);
	Заполнить_Official						(Контент.SupplyAllowedBy, Неопределено);
	Заполнить_Official						(Контент.ChiefAccountant, Неопределено);
	Заполнить_Official						(Контент.SupplyPerformedBy, Неопределено);
	Заполнить_Signer						(Контент.Signer, Неопределено);

КонецПроцедуры

Процедура Заполнить_Torg12Totals(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/Torg12Totals.html

	УстановитьЗначениеXDTO(Контент, "ParcelsQuantity",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "GrossQuantity",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "Quantity",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "TotalWithVatExcluded",		Неопределено);
	УстановитьЗначениеXDTO(Контент, "Vat",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Total",					Неопределено);


КонецПроцедуры

Процедура Заполнить_TransferBase(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/TransferBase.html

	УстановитьЗначениеXDTO(Контент, "DocumentName",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "DocumentNumber",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "DocumentDate",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "DocumentInfo",				Неопределено);


КонецПроцедуры

Процедура Заполнить_TransferInfo(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/TransferInfo.html

	УстановитьЗначениеXDTO(Контент, "OperationInfo",			"реализация");
	УстановитьЗначениеXDTO(Контент, "OperationType",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "TransferDate",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "TransferTextInfo",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "CreatedThingTransferDate",	Неопределено);
	УстановитьЗначениеXDTO(Контент, "CreatedThingInfo",			Неопределено);

	Заполнить_ExtendedOrganizationInfo		(Контент.Carrier, Неопределено);
	Заполнить_Employee						(Контент.Employee, Неопределено);
	Заполнить_OtherIssuer					(Контент.OtherIssuer, Неопределено);
	Заполнить_AdditionalInfoId				(Контент.AdditionalInfoId, Неопределено);


	ТипСтроки = Контент.Свойства().Получить("TransferBases").Тип.Имя;
	Для Сч=1 По 0 Цикл
		
		НовЭлемент = Контент.TransferBases.Добавить(НовыйКонтент(ТипСтроки));
		Заполнить_TransferBase(НовЭлемент, Неопределено);
	
	КонецЦикла;



	ТипСтроки = Контент.Свойства().Получить("Waybills").Тип.Имя;
	Для Сч=1 По 0 Цикл
		
		НовЭлемент = Контент.Waybills.Добавить(НовыйКонтент(ТипСтроки));
		Заполнить_Waybill(НовЭлемент, Неопределено);
	
	КонецЦикла;


КонецПроцедуры

Процедура Заполнить_UcdSellerContent(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/UcdSellerContent.html

	УстановитьЗначениеXDTO(Контент, "Function",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Name",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Date",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Number",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Currency",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "CurrencyRate",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "RevisionDate",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "RevisionNumber",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "Creator",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "CreatorBase",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "GovernmentContractInfo",	Неопределено);
	УстановитьЗначениеXDTO(Контент, "ВалютаСсылка",				Неопределено);



	ТипСтроки = Контент.Свойства().Получить("Invoices").Тип.Имя;
	Для Сч=1 По 0 Цикл
		
		НовЭлемент = Контент.Invoices.Добавить(НовыйКонтент(ТипСтроки));
		Заполнить_InvoiceForCorrectionInfo(НовЭлемент, Неопределено);
	
	КонецЦикла;

	Заполнить_ExtendedOrganizationInfo		(Контент.Seller, Неопределено);
	Заполнить_ExtendedOrganizationInfo		(Контент.Buyer, Неопределено);


	ТипСтроки = Контент.Свойства().Получить("Signers").Тип.Имя;
	Для Сч=1 По 0 Цикл
		
		НовЭлемент = Контент.Signers.Добавить(НовыйКонтент(ТипСтроки));
		Заполнить_ExtendedSigner(НовЭлемент, Неопределено);
	
	КонецЦикла;

	Заполнить_EventContent					(Контент.EventContent, Неопределено);
	Заполнить_InvoiceCorrectionTable		(Контент.InvoiceCorrectionTable, Неопределено);
	Заполнить_AdditionalInfoId				(Контент.AdditionalInfoId, Неопределено);

КонецПроцедуры

Процедура Заполнить_UtdBuyerContent(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/UtdBuyerContent.html

	УстановитьЗначениеXDTO(Контент, "Creator",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "CreatorBase",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "OperationCode",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "AcceptanceDate",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "AdditionalInfoId",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "OperationContent",			Неопределено);

	Заполнить_Employee						(Контент.Employee, Неопределено);
	Заполнить_OtherIssuer					(Контент.OtherIssuer, Неопределено);


	ТипСтроки = Контент.Свойства().Получить("Signers").Тип.Имя;
	Для Сч=1 По 0 Цикл
		
		НовЭлемент = Контент.Signers.Добавить(НовыйКонтент(ТипСтроки));
		Заполнить_ExtendedSigner(НовЭлемент, Неопределено);
	
	КонецЦикла;


КонецПроцедуры

Процедура Заполнить_UtdSellerContent(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/UtdSellerContent.html

	УстановитьЗначениеXDTO(Контент, "Function",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Name",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Date",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Number",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Currency",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "CurrencyRate",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "RevisionDate",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "RevisionNumber",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "Creator",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "CreatorBase",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "GovernmentContractInfo",	Неопределено);
	УстановитьЗначениеXDTO(Контент, "ВалютаСсылка",				Неопределено);

	Заполнить_ExtendedOrganizationInfo		(Контент.Seller, Неопределено);
	Заполнить_ExtendedOrganizationInfo		(Контент.Buyer, Неопределено);
	Заполнить_Shipper						(Контент.Shipper, Неопределено);
	Заполнить_ExtendedOrganizationInfo		(Контент.Consignee, Неопределено);
	Заполнить_InvoiceTable					(Контент.InvoiceTable, Неопределено);
	Заполнить_AdditionalInfoId				(Контент.AdditionalInfoId, Неопределено);
	Заполнить_TransferInfo					(Контент.TransferInfo, Неопределено);


	ТипСтроки = Контент.Свойства().Получить("Signers").Тип.Имя;
	Для Сч=1 По 0 Цикл
		
		НовЭлемент = Контент.Signers.Добавить(НовыйКонтент(ТипСтроки));
		Заполнить_ExtendedSigner(НовЭлемент, Неопределено);
	
	КонецЦикла;



	ТипСтроки = Контент.Свойства().Получить("PaymentDocuments").Тип.Имя;
	Для Сч=1 По 0 Цикл
		
		НовЭлемент = Контент.PaymentDocuments.Добавить(НовыйКонтент(ТипСтроки));
		Заполнить_PaymentDocument(НовЭлемент, Неопределено);
	
	КонецЦикла;


КонецПроцедуры

Процедура Заполнить_UtdSellerContentScf(Контент, Документ1С, мФункция, ТабличнаяЧасть)

	Организация = Документ1С.Учреждение;
	Контрагент = Документ1С.Контрагент;
	Если не ПроверкаКорректностиЗаполненияРеквизитовКонтрагента(Контрагент) Тогда
		//Возврат;
	КонецЕсли;
	
	УстановитьЗначениеXDTO(Контент, "Function",					мФункция);
	УстановитьЗначениеXDTO(Контент, "Name",						Строка(Документ1С));
	УстановитьЗначениеXDTO(Контент, "Date",						Документ1С.Дата);
	УстановитьЗначениеXDTO(Контент, "Number",					Документ1С.Номер);
	УстановитьЗначениеXDTO(Контент, "Currency",					Документ1С.ВалютаДокумента.Код);
	УстановитьЗначениеXDTO(Контент, "CurrencyRate",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "RevisionDate",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "RevisionNumber",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "Creator",					Организация.Наименование);  
	УстановитьЗначениеXDTO(Контент, "CreatorBase",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "GovernmentContractInfo",	Неопределено);
	УстановитьЗначениеXDTO(Контент, "ВалютаСсылка",				Неопределено); 
	
	Заполнить_ExtendedOrganizationInfoOrg	(Контент.Seller, Организация);
	Заполнить_ExtendedOrganizationInfoKont	(Контент.Buyer, Контрагент);
	Заполнить_Shipper						(Контент.Shipper, Организация);
	Заполнить_ExtendedOrganizationInfoKont	(Контент.Consignee, Контрагент);
	Заполнить_InvoiceTableScf				(Контент.InvoiceTable, ТабличнаяЧасть);
	Заполнить_AdditionalInfoId				(Контент.AdditionalInfoId, Неопределено);
	Заполнить_TransferInfo					(Контент.TransferInfo, Неопределено);

КонецПроцедуры

Процедура Заполнить_UtdSellerContentRlz(Контент, Документ1С, мФункция, СчетФактура)  

	Организация = Документ1С.Учреждение;
	Контрагент = СчетФактура.Контрагент;
	Если не ПроверкаКорректностиЗаполненияРеквизитовКонтрагента(Контрагент) Тогда
		//Возврат;
	КонецЕсли;
	ТабличнаяЧасть = ПолучитьТаблицуСпецификацииПоДокументу(Документ1С, СчетФактура);
	
	УстановитьЗначениеXDTO(Контент, "Function",					мФункция);
	УстановитьЗначениеXDTO(Контент, "Name",						Строка(Документ1С));
	УстановитьЗначениеXDTO(Контент, "Date",						Документ1С.Дата);
	УстановитьЗначениеXDTO(Контент, "Number",					Документ1С.Номер);
	УстановитьЗначениеXDTO(Контент, "Currency",					Документ1С.ВалютаДокумента.Код);
	УстановитьЗначениеXDTO(Контент, "CurrencyRate",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "RevisionDate",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "RevisionNumber",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "Creator",					Организация.Наименование);  
	УстановитьЗначениеXDTO(Контент, "CreatorBase",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "GovernmentContractInfo",	Неопределено);
	УстановитьЗначениеXDTO(Контент, "ВалютаСсылка",				Неопределено); 
	
	Заполнить_ExtendedOrganizationInfoOrg	(Контент.Seller, Организация);
	Заполнить_ExtendedOrganizationInfoKont	(Контент.Buyer, Контрагент);
	Заполнить_Shipper						(Контент.Shipper, Организация);
	Заполнить_ExtendedOrganizationInfoKont	(Контент.Consignee, Контрагент);
	Заполнить_InvoiceTableScf				(Контент.InvoiceTable, ТабличнаяЧасть);
	Заполнить_AdditionalInfoId				(Контент.AdditionalInfoId, Неопределено);
	Заполнить_TransferInfo					(Контент.TransferInfo, Неопределено);

КонецПроцедуры

Процедура Заполнить_Waybill(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/Waybill.html

	УстановитьЗначениеXDTO(Контент, "DocumentNumber",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "DocumentDate",				Неопределено);


КонецПроцедуры
//#Область ПодключаемыйМодуль_КонецПримера

//}	МЕТОДЫ ДЛЯ ЗАПОЛНЕНИЯ КОНТЕНТА

//#КонецОбласти
